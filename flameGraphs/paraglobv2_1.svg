<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="678.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="661" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="661" > </text>
<g id="frames">
<g >
<title>__GI___qsort_r (10 samples, 0.15%)</title><rect x="240.7" y="437" width="1.7" height="15.0" fill="rgb(239,149,37)" rx="2" ry="2" />
<text  x="243.66" y="447.5" ></text>
</g>
<g >
<title>std::operator==&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (3 samples, 0.04%)</title><rect x="114.5" y="421" width="0.5" height="15.0" fill="rgb(219,211,50)" rx="2" ry="2" />
<text  x="117.46" y="431.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="162.7" y="501" width="0.2" height="15.0" fill="rgb(252,65,14)" rx="2" ry="2" />
<text  x="165.71" y="511.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.01%)</title><rect x="1178.5" y="565" width="0.2" height="15.0" fill="rgb(244,173,39)" rx="2" ry="2" />
<text  x="1181.51" y="575.5" ></text>
</g>
<g >
<title>node_find_next (1 samples, 0.01%)</title><rect x="1047.0" y="213" width="0.2" height="15.0" fill="rgb(221,61,3)" rx="2" ry="2" />
<text  x="1050.01" y="223.5" ></text>
</g>
<g >
<title>node_release_vectors (1 samples, 0.01%)</title><rect x="1109.4" y="437" width="0.2" height="15.0" fill="rgb(229,7,52)" rx="2" ry="2" />
<text  x="1112.40" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="156.2" y="501" width="0.2" height="15.0" fill="rgb(221,33,10)" rx="2" ry="2" />
<text  x="159.17" y="511.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::~unordered_map (147 samples, 2.20%)</title><rect x="1138.7" y="565" width="26.0" height="15.0" fill="rgb(216,145,20)" rx="2" ry="2" />
<text  x="1141.74" y="575.5" >s..</text>
</g>
<g >
<title>AhoCorasickPlus::addPattern (477 samples, 7.14%)</title><rect x="20.6" y="565" width="84.3" height="15.0" fill="rgb(240,65,53)" rx="2" ry="2" />
<text  x="23.61" y="575.5" >AhoCorasi..</text>
</g>
<g >
<title>ac_trie_traverse_action (34 samples, 0.51%)</title><rect x="1099.3" y="293" width="6.0" height="15.0" fill="rgb(237,7,48)" rx="2" ry="2" />
<text  x="1102.33" y="303.5" ></text>
</g>
<g >
<title>node_release_vectors (1 samples, 0.01%)</title><rect x="1110.3" y="469" width="0.2" height="15.0" fill="rgb(217,145,11)" rx="2" ry="2" />
<text  x="1113.28" y="479.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.01%)</title><rect x="118.0" y="565" width="0.2" height="15.0" fill="rgb(226,97,35)" rx="2" ry="2" />
<text  x="121.00" y="575.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (175 samples, 2.62%)</title><rect x="172.8" y="325" width="30.9" height="15.0" fill="rgb(209,221,41)" rx="2" ry="2" />
<text  x="175.79" y="335.5" >ac..</text>
</g>
<g >
<title>ac_trie_set_failure (224 samples, 3.36%)</title><rect x="448.2" y="341" width="39.6" height="15.0" fill="rgb(232,51,44)" rx="2" ry="2" />
<text  x="451.17" y="351.5" >ac_..</text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, 0ul&gt; (7 samples, 0.10%)</title><rect x="158.6" y="469" width="1.3" height="15.0" fill="rgb(210,121,0)" rx="2" ry="2" />
<text  x="161.65" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (3 samples, 0.04%)</title><rect x="142.9" y="469" width="0.5" height="15.0" fill="rgb(240,14,25)" rx="2" ry="2" />
<text  x="145.92" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (5 samples, 0.07%)</title><rect x="125.1" y="533" width="0.8" height="15.0" fill="rgb(225,146,38)" rx="2" ry="2" />
<text  x="128.07" y="543.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10 samples, 0.15%)</title><rect x="1164.7" y="549" width="1.8" height="15.0" fill="rgb(254,33,19)" rx="2" ry="2" />
<text  x="1167.72" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (39 samples, 0.58%)</title><rect x="110.4" y="517" width="6.9" height="15.0" fill="rgb(244,20,47)" rx="2" ry="2" />
<text  x="113.40" y="527.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.01%)</title><rect x="1105.7" y="293" width="0.2" height="15.0" fill="rgb(208,193,19)" rx="2" ry="2" />
<text  x="1108.69" y="303.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; &gt; (2 samples, 0.03%)</title><rect x="160.6" y="501" width="0.3" height="15.0" fill="rgb(209,87,31)" rx="2" ry="2" />
<text  x="163.59" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_addr (1 samples, 0.01%)</title><rect x="156.2" y="485" width="0.2" height="15.0" fill="rgb(206,177,41)" rx="2" ry="2" />
<text  x="159.17" y="495.5" ></text>
</g>
<g >
<title>node_release_vectors (2 samples, 0.03%)</title><rect x="1103.4" y="149" width="0.3" height="15.0" fill="rgb(216,135,30)" rx="2" ry="2" />
<text  x="1106.39" y="159.5" ></text>
</g>
<g >
<title>node_find_next (200 samples, 3.00%)</title><rect x="810.7" y="181" width="35.3" height="15.0" fill="rgb(209,198,9)" rx="2" ry="2" />
<text  x="813.69" y="191.5" >no..</text>
</g>
<g >
<title>ac_trie_set_failure (215 samples, 3.22%)</title><rect x="410.2" y="357" width="38.0" height="15.0" fill="rgb(207,183,14)" rx="2" ry="2" />
<text  x="413.17" y="367.5" >ac_..</text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="1109.2" y="405" width="0.2" height="15.0" fill="rgb(241,203,41)" rx="2" ry="2" />
<text  x="1112.22" y="415.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="1176.7" y="549" width="0.2" height="15.0" fill="rgb(227,109,45)" rx="2" ry="2" />
<text  x="1179.74" y="559.5" ></text>
</g>
<g >
<title>node_book_replacement (3 samples, 0.04%)</title><rect x="1065.2" y="277" width="0.5" height="15.0" fill="rgb(207,88,2)" rx="2" ry="2" />
<text  x="1068.21" y="287.5" ></text>
</g>
<g >
<title>node_release_vectors (1 samples, 0.01%)</title><rect x="1103.2" y="133" width="0.2" height="15.0" fill="rgb(246,35,42)" rx="2" ry="2" />
<text  x="1106.21" y="143.5" ></text>
</g>
<g >
<title>__strcat_sse2_unaligned (6 samples, 0.09%)</title><rect x="1168.1" y="581" width="1.0" height="15.0" fill="rgb(206,2,25)" rx="2" ry="2" />
<text  x="1171.08" y="591.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (4 samples, 0.06%)</title><rect x="154.9" y="485" width="0.7" height="15.0" fill="rgb(234,108,49)" rx="2" ry="2" />
<text  x="157.94" y="495.5" ></text>
</g>
<g >
<title>std::operator!=&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (3 samples, 0.04%)</title><rect x="114.5" y="437" width="0.5" height="15.0" fill="rgb(206,151,16)" rx="2" ry="2" />
<text  x="117.46" y="447.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (217 samples, 3.25%)</title><rect x="171.4" y="357" width="38.3" height="15.0" fill="rgb(250,113,41)" rx="2" ry="2" />
<text  x="174.38" y="367.5" >ac_..</text>
</g>
<g >
<title>ac_trie_traverse_action (93 samples, 1.39%)</title><rect x="1092.6" y="421" width="16.4" height="15.0" fill="rgb(253,71,44)" rx="2" ry="2" />
<text  x="1095.61" y="431.5" ></text>
</g>
<g >
<title>free@plt (1 samples, 0.01%)</title><rect x="1106.4" y="309" width="0.2" height="15.0" fill="rgb(209,83,2)" rx="2" ry="2" />
<text  x="1109.40" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (8 samples, 0.12%)</title><rect x="163.4" y="517" width="1.4" height="15.0" fill="rgb(218,39,28)" rx="2" ry="2" />
<text  x="166.42" y="527.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (116 samples, 1.74%)</title><rect x="261.7" y="437" width="20.5" height="15.0" fill="rgb(237,1,13)" rx="2" ry="2" />
<text  x="264.70" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (15 samples, 0.22%)</title><rect x="118.7" y="565" width="2.7" height="15.0" fill="rgb(251,46,16)" rx="2" ry="2" />
<text  x="121.70" y="575.5" ></text>
</g>
<g >
<title>[libc-2.28.so] (1 samples, 0.01%)</title><rect x="200.7" y="245" width="0.2" height="15.0" fill="rgb(254,117,13)" rx="2" ry="2" />
<text  x="203.72" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="1189.1" y="597" width="0.2" height="15.0" fill="rgb(225,65,53)" rx="2" ry="2" />
<text  x="1192.12" y="607.5" ></text>
</g>
<g >
<title>node_sort_edges (4 samples, 0.06%)</title><rect x="231.6" y="421" width="0.8" height="15.0" fill="rgb(248,225,23)" rx="2" ry="2" />
<text  x="234.65" y="431.5" ></text>
</g>
<g >
<title>node_book_replacement (1 samples, 0.01%)</title><rect x="1063.6" y="149" width="0.2" height="15.0" fill="rgb(218,43,2)" rx="2" ry="2" />
<text  x="1066.62" y="159.5" ></text>
</g>
<g >
<title>std::operator==&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (4 samples, 0.06%)</title><rect x="164.1" y="453" width="0.7" height="15.0" fill="rgb(221,56,14)" rx="2" ry="2" />
<text  x="167.13" y="463.5" ></text>
</g>
<g >
<title>node_edge_compare (1 samples, 0.01%)</title><rect x="242.8" y="405" width="0.2" height="15.0" fill="rgb(236,184,22)" rx="2" ry="2" />
<text  x="245.78" y="415.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (157 samples, 2.35%)</title><rect x="173.1" y="309" width="27.8" height="15.0" fill="rgb(221,59,44)" rx="2" ry="2" />
<text  x="176.14" y="319.5" >a..</text>
</g>
<g >
<title>_int_malloc (7 samples, 0.10%)</title><rect x="15.3" y="597" width="1.2" height="15.0" fill="rgb(220,1,26)" rx="2" ry="2" />
<text  x="18.30" y="607.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (5 samples, 0.07%)</title><rect x="1062.6" y="133" width="0.8" height="15.0" fill="rgb(215,10,54)" rx="2" ry="2" />
<text  x="1065.56" y="143.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 0.01%)</title><rect x="140.3" y="453" width="0.1" height="15.0" fill="rgb(234,89,28)" rx="2" ry="2" />
<text  x="143.27" y="463.5" ></text>
</g>
<g >
<title>__init_misc (1 samples, 0.01%)</title><rect x="14.6" y="533" width="0.2" height="15.0" fill="rgb(226,149,34)" rx="2" ry="2" />
<text  x="17.60" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (17 samples, 0.25%)</title><rect x="161.8" y="565" width="3.0" height="15.0" fill="rgb(233,201,12)" rx="2" ry="2" />
<text  x="164.83" y="575.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (17 samples, 0.25%)</title><rect x="1100.9" y="229" width="3.0" height="15.0" fill="rgb(207,114,49)" rx="2" ry="2" />
<text  x="1103.92" y="239.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1 samples, 0.01%)</title><rect x="1189.6" y="597" width="0.2" height="15.0" fill="rgb(214,52,49)" rx="2" ry="2" />
<text  x="1192.65" y="607.5" ></text>
</g>
<g >
<title>rand (2 samples, 0.03%)</title><rect x="1187.2" y="597" width="0.3" height="15.0" fill="rgb(233,139,23)" rx="2" ry="2" />
<text  x="1190.17" y="607.5" ></text>
</g>
<g >
<title>_int_free (2 samples, 0.03%)</title><rect x="1106.7" y="325" width="0.4" height="15.0" fill="rgb(232,116,35)" rx="2" ry="2" />
<text  x="1109.75" y="335.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (4,558 samples, 68.27%)</title><rect x="243.5" y="485" width="805.6" height="15.0" fill="rgb(237,200,20)" rx="2" ry="2" />
<text  x="246.49" y="495.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>_int_malloc (6 samples, 0.09%)</title><rect x="71.0" y="453" width="1.0" height="15.0" fill="rgb(227,195,0)" rx="2" ry="2" />
<text  x="73.98" y="463.5" ></text>
</g>
<g >
<title>__GI___libc_free (2 samples, 0.03%)</title><rect x="1167.2" y="581" width="0.4" height="15.0" fill="rgb(251,215,38)" rx="2" ry="2" />
<text  x="1170.20" y="591.5" ></text>
</g>
<g >
<title>node_find_next (1 samples, 0.01%)</title><rect x="1048.6" y="373" width="0.2" height="15.0" fill="rgb(231,86,0)" rx="2" ry="2" />
<text  x="1051.60" y="383.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (12 samples, 0.18%)</title><rect x="173.8" y="101" width="2.2" height="15.0" fill="rgb(209,53,0)" rx="2" ry="2" />
<text  x="176.85" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string@plt (1 samples, 0.01%)</title><rect x="1164.4" y="437" width="0.1" height="15.0" fill="rgb(225,31,22)" rx="2" ry="2" />
<text  x="1167.37" y="447.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (71 samples, 1.06%)</title><rect x="1095.6" y="389" width="12.6" height="15.0" fill="rgb(233,179,35)" rx="2" ry="2" />
<text  x="1098.61" y="399.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.04%)</title><rect x="159.0" y="437" width="0.5" height="15.0" fill="rgb(254,109,12)" rx="2" ry="2" />
<text  x="162.00" y="447.5" ></text>
</g>
<g >
<title>node_find_next (162 samples, 2.43%)</title><rect x="343.9" y="373" width="28.6" height="15.0" fill="rgb(223,8,48)" rx="2" ry="2" />
<text  x="346.89" y="383.5" >no..</text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::size (1 samples, 0.01%)</title><rect x="164.8" y="565" width="0.2" height="15.0" fill="rgb(224,23,20)" rx="2" ry="2" />
<text  x="167.84" y="575.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (8 samples, 0.12%)</title><rect x="1102.3" y="181" width="1.4" height="15.0" fill="rgb(225,225,31)" rx="2" ry="2" />
<text  x="1105.33" y="191.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="1105.9" y="293" width="0.1" height="15.0" fill="rgb(230,129,48)" rx="2" ry="2" />
<text  x="1108.87" y="303.5" ></text>
</g>
<g >
<title>AhoCorasickPlus::findNext (1 samples, 0.01%)</title><rect x="1074.6" y="565" width="0.2" height="15.0" fill="rgb(225,190,54)" rx="2" ry="2" />
<text  x="1077.58" y="575.5" ></text>
</g>
<g >
<title>node_accept_pattern (1 samples, 0.01%)</title><rect x="185.3" y="181" width="0.2" height="15.0" fill="rgb(215,113,18)" rx="2" ry="2" />
<text  x="188.34" y="191.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (1 samples, 0.01%)</title><rect x="242.6" y="405" width="0.2" height="15.0" fill="rgb(223,201,27)" rx="2" ry="2" />
<text  x="245.61" y="415.5" ></text>
</g>
<g >
<title>__GI___qsort_r (3 samples, 0.04%)</title><rect x="200.4" y="261" width="0.5" height="15.0" fill="rgb(213,51,43)" rx="2" ry="2" />
<text  x="203.36" y="271.5" ></text>
</g>
<g >
<title>std::__make_move_if_noexcept_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::move_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; &gt; (1 samples, 0.01%)</title><rect x="112.7" y="501" width="0.2" height="15.0" fill="rgb(238,135,47)" rx="2" ry="2" />
<text  x="115.69" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.01%)</title><rect x="1167.0" y="565" width="0.2" height="15.0" fill="rgb(235,185,51)" rx="2" ry="2" />
<text  x="1170.02" y="575.5" ></text>
</g>
<g >
<title>node_find_next (197 samples, 2.95%)</title><rect x="732.6" y="213" width="34.8" height="15.0" fill="rgb(225,115,2)" rx="2" ry="2" />
<text  x="735.56" y="223.5" >no..</text>
</g>
<g >
<title>node_release_vectors (3 samples, 0.04%)</title><rect x="1106.0" y="325" width="0.6" height="15.0" fill="rgb(252,212,20)" rx="2" ry="2" />
<text  x="1109.04" y="335.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (1 samples, 0.01%)</title><rect x="163.2" y="501" width="0.2" height="15.0" fill="rgb(208,111,12)" rx="2" ry="2" />
<text  x="166.24" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::deallocate (1 samples, 0.01%)</title><rect x="165.5" y="517" width="0.2" height="15.0" fill="rgb(232,221,9)" rx="2" ry="2" />
<text  x="168.54" y="527.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (102 samples, 1.53%)</title><rect x="999.1" y="101" width="18.0" height="15.0" fill="rgb(254,66,48)" rx="2" ry="2" />
<text  x="1002.11" y="111.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.10%)</title><rect x="120.1" y="549" width="1.3" height="15.0" fill="rgb(239,87,38)" rx="2" ry="2" />
<text  x="123.12" y="559.5" ></text>
</g>
<g >
<title>node_release_vectors (4 samples, 0.06%)</title><rect x="1109.6" y="453" width="0.7" height="15.0" fill="rgb(242,0,31)" rx="2" ry="2" />
<text  x="1112.58" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (1 samples, 0.01%)</title><rect x="117.3" y="501" width="0.2" height="15.0" fill="rgb(234,41,16)" rx="2" ry="2" />
<text  x="120.29" y="511.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="1102.7" y="37" width="0.2" height="15.0" fill="rgb(208,142,40)" rx="2" ry="2" />
<text  x="1105.68" y="47.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="1176.7" y="565" width="0.2" height="15.0" fill="rgb(251,197,34)" rx="2" ry="2" />
<text  x="1179.74" y="575.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.01%)</title><rect x="1104.5" y="245" width="0.1" height="15.0" fill="rgb(252,147,54)" rx="2" ry="2" />
<text  x="1107.45" y="255.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="163.2" y="533" width="0.2" height="15.0" fill="rgb(231,157,10)" rx="2" ry="2" />
<text  x="166.24" y="543.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (122 samples, 1.83%)</title><rect x="1088.0" y="453" width="21.6" height="15.0" fill="rgb(239,183,41)" rx="2" ry="2" />
<text  x="1091.01" y="463.5" >a..</text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="112.2" y="437" width="0.1" height="15.0" fill="rgb(240,205,30)" rx="2" ry="2" />
<text  x="115.16" y="447.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (4 samples, 0.06%)</title><rect x="1102.5" y="117" width="0.7" height="15.0" fill="rgb(238,189,17)" rx="2" ry="2" />
<text  x="1105.51" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (12 samples, 0.18%)</title><rect x="141.5" y="517" width="2.1" height="15.0" fill="rgb(219,97,14)" rx="2" ry="2" />
<text  x="144.50" y="527.5" ></text>
</g>
<g >
<title>node_release_vectors (3 samples, 0.04%)</title><rect x="1107.1" y="357" width="0.5" height="15.0" fill="rgb(218,153,48)" rx="2" ry="2" />
<text  x="1110.10" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::deallocate (1 samples, 0.01%)</title><rect x="165.5" y="501" width="0.2" height="15.0" fill="rgb(206,26,22)" rx="2" ry="2" />
<text  x="168.54" y="511.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.06%)</title><rect x="121.9" y="533" width="0.7" height="15.0" fill="rgb(211,199,51)" rx="2" ry="2" />
<text  x="124.88" y="543.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (203 samples, 3.04%)</title><rect x="878.6" y="165" width="35.8" height="15.0" fill="rgb(226,149,7)" rx="2" ry="2" />
<text  x="881.56" y="175.5" >ac_..</text>
</g>
<g >
<title>[unknown] (1 samples, 0.01%)</title><rect x="165.0" y="501" width="0.2" height="15.0" fill="rgb(239,193,32)" rx="2" ry="2" />
<text  x="168.01" y="511.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (2,489 samples, 37.28%)</title><rect x="607.8" y="293" width="439.9" height="15.0" fill="rgb(231,138,3)" rx="2" ry="2" />
<text  x="610.78" y="303.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>__GI___qsort_r (4 samples, 0.06%)</title><rect x="239.2" y="421" width="0.8" height="15.0" fill="rgb(217,222,11)" rx="2" ry="2" />
<text  x="242.25" y="431.5" ></text>
</g>
<g >
<title>node_init (2 samples, 0.03%)</title><rect x="81.1" y="517" width="0.3" height="15.0" fill="rgb(242,56,25)" rx="2" ry="2" />
<text  x="84.05" y="527.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (412 samples, 6.17%)</title><rect x="167.1" y="469" width="72.9" height="15.0" fill="rgb(221,227,18)" rx="2" ry="2" />
<text  x="170.13" y="479.5" >ac_trie_..</text>
</g>
<g >
<title>_int_free (2 samples, 0.03%)</title><rect x="1157.1" y="453" width="0.4" height="15.0" fill="rgb(253,162,31)" rx="2" ry="2" />
<text  x="1160.12" y="463.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (27 samples, 0.40%)</title><rect x="1061.0" y="293" width="4.7" height="15.0" fill="rgb(218,21,29)" rx="2" ry="2" />
<text  x="1063.97" y="303.5" ></text>
</g>
<g >
<title>__GI___qsort_r (1 samples, 0.01%)</title><rect x="187.5" y="181" width="0.1" height="15.0" fill="rgb(218,95,2)" rx="2" ry="2" />
<text  x="190.46" y="191.5" ></text>
</g>
<g >
<title>node_find_next (192 samples, 2.88%)</title><rect x="414.2" y="341" width="34.0" height="15.0" fill="rgb(245,39,14)" rx="2" ry="2" />
<text  x="417.23" y="351.5" >no..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (70 samples, 1.05%)</title><rect x="1152.4" y="533" width="12.3" height="15.0" fill="rgb(227,197,12)" rx="2" ry="2" />
<text  x="1155.35" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="110.0" y="501" width="0.2" height="15.0" fill="rgb(238,28,36)" rx="2" ry="2" />
<text  x="113.04" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (11 samples, 0.16%)</title><rect x="138.5" y="485" width="1.9" height="15.0" fill="rgb(208,52,0)" rx="2" ry="2" />
<text  x="141.50" y="495.5" ></text>
</g>
<g >
<title>mpool_malloc (2 samples, 0.03%)</title><rect x="32.4" y="517" width="0.4" height="15.0" fill="rgb(254,73,36)" rx="2" ry="2" />
<text  x="35.45" y="527.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (10 samples, 0.15%)</title><rect x="1062.4" y="197" width="1.8" height="15.0" fill="rgb(242,132,15)" rx="2" ry="2" />
<text  x="1065.38" y="207.5" ></text>
</g>
<g >
<title>node_find_next (64 samples, 0.96%)</title><rect x="1029.3" y="53" width="11.3" height="15.0" fill="rgb(235,161,25)" rx="2" ry="2" />
<text  x="1032.33" y="63.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (2 samples, 0.03%)</title><rect x="111.5" y="469" width="0.3" height="15.0" fill="rgb(245,90,27)" rx="2" ry="2" />
<text  x="114.46" y="479.5" ></text>
</g>
<g >
<title>node_book_replacement (3 samples, 0.04%)</title><rect x="1067.2" y="373" width="0.5" height="15.0" fill="rgb(210,222,46)" rx="2" ry="2" />
<text  x="1070.16" y="383.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.01%)</title><rect x="1106.6" y="325" width="0.1" height="15.0" fill="rgb(237,5,4)" rx="2" ry="2" />
<text  x="1109.57" y="335.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (5 samples, 0.07%)</title><rect x="111.3" y="501" width="0.9" height="15.0" fill="rgb(207,81,46)" rx="2" ry="2" />
<text  x="114.28" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::substr (5 samples, 0.07%)</title><rect x="107.7" y="549" width="0.9" height="15.0" fill="rgb(209,19,23)" rx="2" ry="2" />
<text  x="110.74" y="559.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (10 samples, 0.15%)</title><rect x="1164.7" y="533" width="1.8" height="15.0" fill="rgb(225,147,34)" rx="2" ry="2" />
<text  x="1167.72" y="543.5" ></text>
</g>
<g >
<title>node_find_next (165 samples, 2.47%)</title><rect x="918.2" y="133" width="29.1" height="15.0" fill="rgb(215,17,36)" rx="2" ry="2" />
<text  x="921.15" y="143.5" >no..</text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="12.5" y="549" width="0.2" height="15.0" fill="rgb(213,82,22)" rx="2" ry="2" />
<text  x="15.47" y="559.5" ></text>
</g>
<g >
<title>__GI___libc_free (4 samples, 0.06%)</title><rect x="13.7" y="597" width="0.7" height="15.0" fill="rgb(246,8,20)" rx="2" ry="2" />
<text  x="16.71" y="607.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, false&gt;::_Head_base (1 samples, 0.01%)</title><rect x="160.2" y="453" width="0.2" height="15.0" fill="rgb(250,16,5)" rx="2" ry="2" />
<text  x="163.24" y="463.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (232 samples, 3.48%)</title><rect x="687.0" y="245" width="41.0" height="15.0" fill="rgb(228,226,21)" rx="2" ry="2" />
<text  x="689.96" y="255.5" >ac_..</text>
</g>
<g >
<title>ac_trie_traverse_action (80 samples, 1.20%)</title><rect x="173.5" y="229" width="14.1" height="15.0" fill="rgb(214,214,11)" rx="2" ry="2" />
<text  x="176.50" y="239.5" ></text>
</g>
<g >
<title>node_find_next (2 samples, 0.03%)</title><rect x="1047.7" y="309" width="0.4" height="15.0" fill="rgb(212,62,49)" rx="2" ry="2" />
<text  x="1050.71" y="319.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (11 samples, 0.16%)</title><rect x="245.1" y="469" width="1.9" height="15.0" fill="rgb(230,160,35)" rx="2" ry="2" />
<text  x="248.08" y="479.5" ></text>
</g>
<g >
<title>node_collect_matches (16 samples, 0.24%)</title><rect x="209.7" y="357" width="2.9" height="15.0" fill="rgb(228,99,22)" rx="2" ry="2" />
<text  x="212.73" y="367.5" ></text>
</g>
<g >
<title>_dl_catch_exception (1 samples, 0.01%)</title><rect x="11.2" y="517" width="0.2" height="15.0" fill="rgb(215,222,11)" rx="2" ry="2" />
<text  x="14.24" y="527.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (4,561 samples, 68.32%)</title><rect x="243.0" y="533" width="806.1" height="15.0" fill="rgb(246,107,45)" rx="2" ry="2" />
<text  x="245.96" y="543.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>node_collect_matches (3 samples, 0.04%)</title><rect x="176.0" y="101" width="0.5" height="15.0" fill="rgb(229,76,42)" rx="2" ry="2" />
<text  x="178.97" y="111.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.01%)</title><rect x="117.5" y="517" width="0.1" height="15.0" fill="rgb(239,45,22)" rx="2" ry="2" />
<text  x="120.47" y="527.5" ></text>
</g>
<g >
<title>std::operator!=&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (1 samples, 0.01%)</title><rect x="115.0" y="453" width="0.2" height="15.0" fill="rgb(228,53,20)" rx="2" ry="2" />
<text  x="117.99" y="463.5" ></text>
</g>
<g >
<title>__random (26 samples, 0.39%)</title><rect x="1172.1" y="549" width="4.6" height="15.0" fill="rgb(216,92,22)" rx="2" ry="2" />
<text  x="1175.15" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate (1 samples, 0.01%)</title><rect x="112.2" y="469" width="0.1" height="15.0" fill="rgb(237,204,49)" rx="2" ry="2" />
<text  x="115.16" y="479.5" ></text>
</g>
<g >
<title>node_collect_matches (8 samples, 0.12%)</title><rect x="179.7" y="165" width="1.4" height="15.0" fill="rgb(245,110,12)" rx="2" ry="2" />
<text  x="182.68" y="175.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (14 samples, 0.21%)</title><rect x="1062.2" y="245" width="2.5" height="15.0" fill="rgb(228,85,0)" rx="2" ry="2" />
<text  x="1065.21" y="255.5" ></text>
</g>
<g >
<title>node_edge_compare (9 samples, 0.13%)</title><rect x="240.7" y="389" width="1.6" height="15.0" fill="rgb(227,205,2)" rx="2" ry="2" />
<text  x="243.66" y="399.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (198 samples, 2.97%)</title><rect x="1075.5" y="485" width="35.0" height="15.0" fill="rgb(215,17,53)" rx="2" ry="2" />
<text  x="1078.46" y="495.5" >ac..</text>
</g>
<g >
<title>node_find_next (1 samples, 0.01%)</title><rect x="1048.8" y="421" width="0.2" height="15.0" fill="rgb(249,97,47)" rx="2" ry="2" />
<text  x="1051.77" y="431.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (1 samples, 0.01%)</title><rect x="243.3" y="485" width="0.2" height="15.0" fill="rgb(222,36,34)" rx="2" ry="2" />
<text  x="246.31" y="495.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (203 samples, 3.04%)</title><rect x="1074.8" y="533" width="35.8" height="15.0" fill="rgb(250,17,11)" rx="2" ry="2" />
<text  x="1077.76" y="543.5" >ac_..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_buckets (77 samples, 1.15%)</title><rect x="1138.7" y="501" width="13.7" height="15.0" fill="rgb(241,4,4)" rx="2" ry="2" />
<text  x="1141.74" y="511.5" ></text>
</g>
<g >
<title>node_release_vectors (3 samples, 0.04%)</title><rect x="1104.5" y="261" width="0.5" height="15.0" fill="rgb(211,39,51)" rx="2" ry="2" />
<text  x="1107.45" y="271.5" ></text>
</g>
<g >
<title>node_has_pattern (1 samples, 0.01%)</title><rect x="30.1" y="517" width="0.2" height="15.0" fill="rgb(220,8,53)" rx="2" ry="2" />
<text  x="33.15" y="527.5" ></text>
</g>
<g >
<title>node_create_next (289 samples, 4.33%)</title><rect x="30.3" y="533" width="51.1" height="15.0" fill="rgb(231,8,6)" rx="2" ry="2" />
<text  x="33.33" y="543.5" >node_..</text>
</g>
<g >
<title>std::move_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;::operator* (1 samples, 0.01%)</title><rect x="114.1" y="437" width="0.2" height="15.0" fill="rgb(210,110,11)" rx="2" ry="2" />
<text  x="117.11" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (3 samples, 0.04%)</title><rect x="163.4" y="453" width="0.6" height="15.0" fill="rgb(233,214,10)" rx="2" ry="2" />
<text  x="166.42" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt;::allocate (8 samples, 0.12%)</title><rect x="156.7" y="501" width="1.4" height="15.0" fill="rgb(247,73,50)" rx="2" ry="2" />
<text  x="159.70" y="511.5" ></text>
</g>
<g >
<title>ac_trie_add (473 samples, 7.09%)</title><rect x="21.1" y="549" width="83.6" height="15.0" fill="rgb(244,53,50)" rx="2" ry="2" />
<text  x="24.14" y="559.5" >ac_trie_add</text>
</g>
<g >
<title>node_sort_edges (4 samples, 0.06%)</title><rect x="223.2" y="389" width="0.7" height="15.0" fill="rgb(219,99,1)" rx="2" ry="2" />
<text  x="226.16" y="399.5" ></text>
</g>
<g >
<title>node_sort_edges (2 samples, 0.03%)</title><rect x="212.2" y="341" width="0.4" height="15.0" fill="rgb(254,130,29)" rx="2" ry="2" />
<text  x="215.20" y="351.5" ></text>
</g>
<g >
<title>node_release_vectors (2 samples, 0.03%)</title><rect x="1105.3" y="293" width="0.4" height="15.0" fill="rgb(218,208,47)" rx="2" ry="2" />
<text  x="1108.34" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_M_next (29 samples, 0.43%)</title><rect x="148.4" y="485" width="5.1" height="15.0" fill="rgb(214,71,3)" rx="2" ry="2" />
<text  x="151.40" y="495.5" ></text>
</g>
<g >
<title>_int_malloc (6 samples, 0.09%)</title><rect x="122.9" y="501" width="1.1" height="15.0" fill="rgb(245,32,52)" rx="2" ry="2" />
<text  x="125.94" y="511.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (10 samples, 0.15%)</title><rect x="1164.7" y="517" width="1.8" height="15.0" fill="rgb(215,133,19)" rx="2" ry="2" />
<text  x="1167.72" y="527.5" ></text>
</g>
<g >
<title>std::_Hash_bytes@plt (1 samples, 0.01%)</title><rect x="155.6" y="485" width="0.2" height="15.0" fill="rgb(232,228,7)" rx="2" ry="2" />
<text  x="158.64" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.01%)</title><rect x="118.0" y="549" width="0.2" height="15.0" fill="rgb(250,58,28)" rx="2" ry="2" />
<text  x="121.00" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (3 samples, 0.04%)</title><rect x="162.4" y="517" width="0.5" height="15.0" fill="rgb(238,40,39)" rx="2" ry="2" />
<text  x="165.36" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_M_next (1 samples, 0.01%)</title><rect x="143.4" y="501" width="0.2" height="15.0" fill="rgb(223,143,30)" rx="2" ry="2" />
<text  x="146.45" y="511.5" ></text>
</g>
<g >
<title>Paraglob::get (1 samples, 0.01%)</title><rect x="1074.6" y="581" width="0.2" height="15.0" fill="rgb(214,81,20)" rx="2" ry="2" />
<text  x="1077.58" y="591.5" ></text>
</g>
<g >
<title>node_release_vectors (1 samples, 0.01%)</title><rect x="1102.9" y="69" width="0.1" height="15.0" fill="rgb(233,3,16)" rx="2" ry="2" />
<text  x="1105.86" y="79.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (3,170 samples, 47.48%)</title><rect x="487.8" y="341" width="560.3" height="15.0" fill="rgb(243,48,0)" rx="2" ry="2" />
<text  x="490.76" y="351.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>__GI___qsort_r (1 samples, 0.01%)</title><rect x="190.8" y="197" width="0.2" height="15.0" fill="rgb(230,30,22)" rx="2" ry="2" />
<text  x="193.82" y="207.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (29 samples, 0.43%)</title><rect x="1099.9" y="277" width="5.1" height="15.0" fill="rgb(217,75,27)" rx="2" ry="2" />
<text  x="1102.86" y="287.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (31 samples, 0.46%)</title><rect x="1060.6" y="325" width="5.5" height="15.0" fill="rgb(244,5,3)" rx="2" ry="2" />
<text  x="1063.62" y="335.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (64 samples, 0.96%)</title><rect x="1096.3" y="373" width="11.3" height="15.0" fill="rgb(216,83,13)" rx="2" ry="2" />
<text  x="1099.32" y="383.5" ></text>
</g>
<g >
<title>node_find_next (207 samples, 3.10%)</title><rect x="492.2" y="309" width="36.6" height="15.0" fill="rgb(250,78,41)" rx="2" ry="2" />
<text  x="495.18" y="319.5" >nod..</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (3 samples, 0.04%)</title><rect x="138.0" y="469" width="0.5" height="15.0" fill="rgb(214,226,18)" rx="2" ry="2" />
<text  x="140.97" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_extract (1 samples, 0.01%)</title><rect x="140.4" y="485" width="0.2" height="15.0" fill="rgb(223,6,27)" rx="2" ry="2" />
<text  x="143.44" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (9 samples, 0.13%)</title><rect x="163.2" y="549" width="1.6" height="15.0" fill="rgb(239,115,5)" rx="2" ry="2" />
<text  x="166.24" y="559.5" ></text>
</g>
<g >
<title>node_sort_edges (10 samples, 0.15%)</title><rect x="240.7" y="453" width="1.7" height="15.0" fill="rgb(211,227,8)" rx="2" ry="2" />
<text  x="243.66" y="463.5" ></text>
</g>
<g >
<title>_int_free (158 samples, 2.37%)</title><rect x="1110.8" y="517" width="27.9" height="15.0" fill="rgb(219,20,44)" rx="2" ry="2" />
<text  x="1113.81" y="527.5" >_..</text>
</g>
<g >
<title>ac_trie_traverse_action (8 samples, 0.12%)</title><rect x="1102.3" y="165" width="1.4" height="15.0" fill="rgb(219,220,26)" rx="2" ry="2" />
<text  x="1105.33" y="175.5" ></text>
</g>
<g >
<title>node_book_replacement (1 samples, 0.01%)</title><rect x="1066.8" y="341" width="0.2" height="15.0" fill="rgb(224,109,1)" rx="2" ry="2" />
<text  x="1069.80" y="351.5" ></text>
</g>
<g >
<title>_int_free (2 samples, 0.03%)</title><rect x="1103.4" y="133" width="0.3" height="15.0" fill="rgb(253,140,48)" rx="2" ry="2" />
<text  x="1106.39" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (56 samples, 0.84%)</title><rect x="143.6" y="501" width="9.9" height="15.0" fill="rgb(214,144,17)" rx="2" ry="2" />
<text  x="146.62" y="511.5" ></text>
</g>
<g >
<title>Paraglob::add (1 samples, 0.01%)</title><rect x="12.3" y="597" width="0.2" height="15.0" fill="rgb(208,170,53)" rx="2" ry="2" />
<text  x="15.30" y="607.5" ></text>
</g>
<g >
<title>node_collect_matches (25 samples, 0.37%)</title><rect x="227.9" y="437" width="4.5" height="15.0" fill="rgb(235,128,30)" rx="2" ry="2" />
<text  x="230.94" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::deallocate (2 samples, 0.03%)</title><rect x="112.3" y="469" width="0.4" height="15.0" fill="rgb(232,134,47)" rx="2" ry="2" />
<text  x="115.34" y="479.5" ></text>
</g>
<g >
<title>node_find_next (27 samples, 0.40%)</title><rect x="1041.4" y="37" width="4.7" height="15.0" fill="rgb(224,153,24)" rx="2" ry="2" />
<text  x="1044.35" y="47.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (8 samples, 0.12%)</title><rect x="154.4" y="501" width="1.4" height="15.0" fill="rgb(242,191,30)" rx="2" ry="2" />
<text  x="157.41" y="511.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (405 samples, 6.07%)</title><rect x="975.1" y="133" width="71.6" height="15.0" fill="rgb(213,56,20)" rx="2" ry="2" />
<text  x="978.07" y="143.5" >ac_trie_..</text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="1110.5" y="469" width="0.1" height="15.0" fill="rgb(243,163,46)" rx="2" ry="2" />
<text  x="1113.46" y="479.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (135 samples, 2.02%)</title><rect x="975.2" y="117" width="23.9" height="15.0" fill="rgb(246,186,3)" rx="2" ry="2" />
<text  x="978.25" y="127.5" >a..</text>
</g>
<g >
<title>ac_trie_set_failure (156 samples, 2.34%)</title><rect x="311.7" y="405" width="27.6" height="15.0" fill="rgb(222,196,33)" rx="2" ry="2" />
<text  x="314.72" y="415.5" >a..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (12 samples, 0.18%)</title><rect x="153.7" y="533" width="2.1" height="15.0" fill="rgb(229,221,10)" rx="2" ry="2" />
<text  x="156.70" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::size (2 samples, 0.03%)</title><rect x="116.9" y="485" width="0.4" height="15.0" fill="rgb(243,172,23)" rx="2" ry="2" />
<text  x="119.94" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_deallocate (1 samples, 0.01%)</title><rect x="165.5" y="533" width="0.2" height="15.0" fill="rgb(240,171,34)" rx="2" ry="2" />
<text  x="168.54" y="543.5" ></text>
</g>
<g >
<title>malloc_consolidate (157 samples, 2.35%)</title><rect x="1111.0" y="501" width="27.7" height="15.0" fill="rgb(205,143,10)" rx="2" ry="2" />
<text  x="1113.99" y="511.5" >m..</text>
</g>
<g >
<title>node_sort_edges (1 samples, 0.01%)</title><rect x="190.8" y="213" width="0.2" height="15.0" fill="rgb(205,189,53)" rx="2" ry="2" />
<text  x="193.82" y="223.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (90 samples, 1.35%)</title><rect x="1054.3" y="437" width="15.9" height="15.0" fill="rgb(221,28,36)" rx="2" ry="2" />
<text  x="1057.25" y="447.5" ></text>
</g>
<g >
<title>node_release_vectors (3 samples, 0.04%)</title><rect x="1107.6" y="373" width="0.6" height="15.0" fill="rgb(207,80,14)" rx="2" ry="2" />
<text  x="1110.63" y="383.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (234 samples, 3.51%)</title><rect x="171.2" y="373" width="41.4" height="15.0" fill="rgb(254,109,48)" rx="2" ry="2" />
<text  x="174.20" y="383.5" >ac_..</text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;*&gt;::pointer_to (1 samples, 0.01%)</title><rect x="1164.5" y="485" width="0.2" height="15.0" fill="rgb(224,88,1)" rx="2" ry="2" />
<text  x="1167.55" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (4 samples, 0.06%)</title><rect x="165.0" y="565" width="0.7" height="15.0" fill="rgb(246,134,43)" rx="2" ry="2" />
<text  x="168.01" y="575.5" ></text>
</g>
<g >
<title>__GI___qsort_r (1 samples, 0.01%)</title><rect x="194.7" y="229" width="0.2" height="15.0" fill="rgb(253,120,1)" rx="2" ry="2" />
<text  x="197.71" y="239.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;::base (2 samples, 0.03%)</title><rect x="114.6" y="405" width="0.4" height="15.0" fill="rgb(252,14,18)" rx="2" ry="2" />
<text  x="117.64" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (1 samples, 0.01%)</title><rect x="156.2" y="517" width="0.2" height="15.0" fill="rgb(226,60,26)" rx="2" ry="2" />
<text  x="159.17" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::deallocate (4 samples, 0.06%)</title><rect x="1156.9" y="485" width="0.8" height="15.0" fill="rgb(211,79,21)" rx="2" ry="2" />
<text  x="1159.95" y="495.5" ></text>
</g>
<g >
<title>node_release_vectors (2 samples, 0.03%)</title><rect x="1105.7" y="309" width="0.3" height="15.0" fill="rgb(229,154,38)" rx="2" ry="2" />
<text  x="1108.69" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_check_len (8 samples, 0.12%)</title><rect x="115.9" y="501" width="1.4" height="15.0" fill="rgb(233,187,2)" rx="2" ry="2" />
<text  x="118.87" y="511.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (1 samples, 0.01%)</title><rect x="121.4" y="549" width="0.1" height="15.0" fill="rgb(247,97,27)" rx="2" ry="2" />
<text  x="124.35" y="559.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (28 samples, 0.42%)</title><rect x="173.7" y="149" width="4.9" height="15.0" fill="rgb(211,147,30)" rx="2" ry="2" />
<text  x="176.67" y="159.5" ></text>
</g>
<g >
<title>node_find_next (162 samples, 2.43%)</title><rect x="849.0" y="165" width="28.7" height="15.0" fill="rgb(230,184,7)" rx="2" ry="2" />
<text  x="852.04" y="175.5" >no..</text>
</g>
<g >
<title>__GI___libc_malloc (6 samples, 0.09%)</title><rect x="71.0" y="469" width="1.0" height="15.0" fill="rgb(249,167,32)" rx="2" ry="2" />
<text  x="73.98" y="479.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (111 samples, 1.66%)</title><rect x="173.5" y="261" width="19.6" height="15.0" fill="rgb(227,191,2)" rx="2" ry="2" />
<text  x="176.50" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_addr (1 samples, 0.01%)</title><rect x="161.5" y="485" width="0.2" height="15.0" fill="rgb(225,39,12)" rx="2" ry="2" />
<text  x="164.48" y="495.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="108.3" y="501" width="0.2" height="15.0" fill="rgb(240,178,49)" rx="2" ry="2" />
<text  x="111.27" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="140.1" y="437" width="0.2" height="15.0" fill="rgb(214,224,28)" rx="2" ry="2" />
<text  x="143.09" y="447.5" ></text>
</g>
<g >
<title>node_create (2 samples, 0.03%)</title><rect x="13.4" y="581" width="0.3" height="15.0" fill="rgb(244,14,38)" rx="2" ry="2" />
<text  x="16.36" y="591.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (363 samples, 5.44%)</title><rect x="168.2" y="453" width="64.2" height="15.0" fill="rgb(214,139,28)" rx="2" ry="2" />
<text  x="171.19" y="463.5" >ac_trie..</text>
</g>
<g >
<title>ac_trie_set_failure (67 samples, 1.00%)</title><rect x="1028.8" y="69" width="11.8" height="15.0" fill="rgb(237,194,29)" rx="2" ry="2" />
<text  x="1031.80" y="79.5" ></text>
</g>
<g >
<title>__GI___qsort_r (1 samples, 0.01%)</title><rect x="183.4" y="149" width="0.2" height="15.0" fill="rgb(209,160,23)" rx="2" ry="2" />
<text  x="186.39" y="159.5" ></text>
</g>
<g >
<title>rand (1 samples, 0.01%)</title><rect x="1169.5" y="581" width="0.2" height="15.0" fill="rgb(231,114,43)" rx="2" ry="2" />
<text  x="1172.50" y="591.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (144 samples, 2.16%)</title><rect x="1049.1" y="501" width="25.5" height="15.0" fill="rgb(238,23,24)" rx="2" ry="2" />
<text  x="1052.13" y="511.5" >m..</text>
</g>
<g >
<title>ac_trie_traverse_action (21 samples, 0.31%)</title><rect x="1100.6" y="245" width="3.7" height="15.0" fill="rgb(212,131,48)" rx="2" ry="2" />
<text  x="1103.56" y="255.5" ></text>
</g>
<g >
<title>malloc_consolidate (77 samples, 1.15%)</title><rect x="1138.7" y="437" width="13.7" height="15.0" fill="rgb(228,12,4)" rx="2" ry="2" />
<text  x="1141.74" y="447.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (2,265 samples, 33.93%)</title><rect x="647.0" y="277" width="400.4" height="15.0" fill="rgb(222,132,42)" rx="2" ry="2" />
<text  x="650.02" y="287.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>ac_trie_traverse_action (437 samples, 6.55%)</title><rect x="165.7" y="517" width="77.3" height="15.0" fill="rgb(216,45,34)" rx="2" ry="2" />
<text  x="168.72" y="527.5" >ac_trie_..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (56 samples, 0.84%)</title><rect x="143.6" y="517" width="9.9" height="15.0" fill="rgb(212,69,25)" rx="2" ry="2" />
<text  x="146.62" y="527.5" ></text>
</g>
<g >
<title>node_collect_matches (13 samples, 0.19%)</title><rect x="195.1" y="277" width="2.3" height="15.0" fill="rgb(234,110,19)" rx="2" ry="2" />
<text  x="198.06" y="287.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (2,938 samples, 44.01%)</title><rect x="528.8" y="325" width="519.3" height="15.0" fill="rgb(211,160,34)" rx="2" ry="2" />
<text  x="531.77" y="335.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (1 samples, 0.01%)</title><rect x="154.2" y="517" width="0.2" height="15.0" fill="rgb(209,145,2)" rx="2" ry="2" />
<text  x="157.23" y="527.5" ></text>
</g>
<g >
<title>.annobin_rtld.c (13 samples, 0.19%)</title><rect x="10.0" y="597" width="2.3" height="15.0" fill="rgb(232,159,26)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>std::_Construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (3 samples, 0.04%)</title><rect x="163.4" y="469" width="0.6" height="15.0" fill="rgb(221,153,35)" rx="2" ry="2" />
<text  x="166.42" y="479.5" ></text>
</g>
<g >
<title>node_release_vectors (3 samples, 0.04%)</title><rect x="1108.5" y="405" width="0.5" height="15.0" fill="rgb(219,176,0)" rx="2" ry="2" />
<text  x="1111.52" y="415.5" ></text>
</g>
<g >
<title>node_collect_matches (22 samples, 0.33%)</title><rect x="205.8" y="341" width="3.9" height="15.0" fill="rgb(219,98,31)" rx="2" ry="2" />
<text  x="208.84" y="351.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (437 samples, 6.55%)</title><rect x="165.7" y="501" width="77.3" height="15.0" fill="rgb(209,180,18)" rx="2" ry="2" />
<text  x="168.72" y="511.5" >ac_trie_..</text>
</g>
<g >
<title>_int_free (3 samples, 0.04%)</title><rect x="14.8" y="597" width="0.5" height="15.0" fill="rgb(239,1,10)" rx="2" ry="2" />
<text  x="17.77" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (49 samples, 0.73%)</title><rect x="108.8" y="549" width="8.7" height="15.0" fill="rgb(213,213,14)" rx="2" ry="2" />
<text  x="111.80" y="559.5" ></text>
</g>
<g >
<title>_dl_map_object_from_fd (1 samples, 0.01%)</title><rect x="11.2" y="469" width="0.2" height="15.0" fill="rgb(232,97,33)" rx="2" ry="2" />
<text  x="14.24" y="479.5" ></text>
</g>
<g >
<title>memset (1 samples, 0.01%)</title><rect x="11.2" y="453" width="0.2" height="15.0" fill="rgb(250,119,36)" rx="2" ry="2" />
<text  x="14.24" y="463.5" ></text>
</g>
<g >
<title>node_find_next (181 samples, 2.71%)</title><rect x="882.5" y="149" width="31.9" height="15.0" fill="rgb(225,52,23)" rx="2" ry="2" />
<text  x="885.45" y="159.5" >no..</text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.01%)</title><rect x="1156.9" y="453" width="0.2" height="15.0" fill="rgb(236,15,35)" rx="2" ry="2" />
<text  x="1159.95" y="463.5" ></text>
</g>
<g >
<title>rand (26 samples, 0.39%)</title><rect x="1172.1" y="565" width="4.6" height="15.0" fill="rgb(218,64,12)" rx="2" ry="2" />
<text  x="1175.15" y="575.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (224 samples, 3.36%)</title><rect x="568.2" y="293" width="39.6" height="15.0" fill="rgb(213,56,53)" rx="2" ry="2" />
<text  x="571.18" y="303.5" >ac_..</text>
</g>
<g >
<title>ac_trie_search (1 samples, 0.01%)</title><rect x="1074.6" y="533" width="0.2" height="15.0" fill="rgb(207,149,46)" rx="2" ry="2" />
<text  x="1077.58" y="543.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (20 samples, 0.30%)</title><rect x="1061.7" y="261" width="3.5" height="15.0" fill="rgb(213,205,16)" rx="2" ry="2" />
<text  x="1064.68" y="271.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (3 samples, 0.04%)</title><rect x="159.0" y="421" width="0.5" height="15.0" fill="rgb(241,159,8)" rx="2" ry="2" />
<text  x="162.00" y="431.5" ></text>
</g>
<g >
<title>_dl_map_object (1 samples, 0.01%)</title><rect x="11.2" y="485" width="0.2" height="15.0" fill="rgb(232,123,52)" rx="2" ry="2" />
<text  x="14.24" y="495.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="146.8" y="405" width="0.2" height="15.0" fill="rgb(212,45,46)" rx="2" ry="2" />
<text  x="149.81" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (8 samples, 0.12%)</title><rect x="154.4" y="517" width="1.4" height="15.0" fill="rgb(246,82,15)" rx="2" ry="2" />
<text  x="157.41" y="527.5" ></text>
</g>
<g >
<title>node_collect_matches (11 samples, 0.16%)</title><rect x="193.1" y="261" width="2.0" height="15.0" fill="rgb(205,75,11)" rx="2" ry="2" />
<text  x="196.12" y="271.5" ></text>
</g>
<g >
<title>node_sort_edges (1 samples, 0.01%)</title><rect x="174.7" y="53" width="0.2" height="15.0" fill="rgb(246,124,45)" rx="2" ry="2" />
<text  x="177.73" y="63.5" ></text>
</g>
<g >
<title>AhoCorasickPlus::~AhoCorasickPlus (362 samples, 5.42%)</title><rect x="1074.8" y="565" width="63.9" height="15.0" fill="rgb(232,29,13)" rx="2" ry="2" />
<text  x="1077.76" y="575.5" >AhoCora..</text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (7 samples, 0.10%)</title><rect x="158.6" y="485" width="1.3" height="15.0" fill="rgb(224,151,10)" rx="2" ry="2" />
<text  x="161.65" y="495.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; &gt; (1 samples, 0.01%)</title><rect x="161.1" y="517" width="0.2" height="15.0" fill="rgb(236,131,18)" rx="2" ry="2" />
<text  x="164.12" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (6 samples, 0.09%)</title><rect x="162.2" y="549" width="1.0" height="15.0" fill="rgb(238,159,40)" rx="2" ry="2" />
<text  x="165.18" y="559.5" ></text>
</g>
<g >
<title>__GI___libc_realloc (1 samples, 0.01%)</title><rect x="185.3" y="149" width="0.2" height="15.0" fill="rgb(220,41,14)" rx="2" ry="2" />
<text  x="188.34" y="159.5" ></text>
</g>
<g >
<title>node_collect_matches (3 samples, 0.04%)</title><rect x="242.4" y="485" width="0.6" height="15.0" fill="rgb(249,133,1)" rx="2" ry="2" />
<text  x="245.43" y="495.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.01%)</title><rect x="12.5" y="565" width="0.2" height="15.0" fill="rgb(245,213,45)" rx="2" ry="2" />
<text  x="15.47" y="575.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (3 samples, 0.04%)</title><rect x="242.4" y="437" width="0.6" height="15.0" fill="rgb(223,190,11)" rx="2" ry="2" />
<text  x="245.43" y="447.5" ></text>
</g>
<g >
<title>node_sort_edges (1 samples, 0.01%)</title><rect x="203.5" y="293" width="0.2" height="15.0" fill="rgb(251,3,15)" rx="2" ry="2" />
<text  x="206.54" y="303.5" ></text>
</g>
<g >
<title>node_sort_edges (1 samples, 0.01%)</title><rect x="187.5" y="197" width="0.1" height="15.0" fill="rgb(210,6,34)" rx="2" ry="2" />
<text  x="190.46" y="207.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (155 samples, 2.32%)</title><rect x="947.7" y="133" width="27.4" height="15.0" fill="rgb(237,180,0)" rx="2" ry="2" />
<text  x="950.67" y="143.5" >a..</text>
</g>
<g >
<title>ac_trie_traverse_action (172 samples, 2.58%)</title><rect x="1079.9" y="469" width="30.4" height="15.0" fill="rgb(205,167,24)" rx="2" ry="2" />
<text  x="1082.88" y="479.5" >ac..</text>
</g>
<g >
<title>msort_with_tmp.part.0 (1 samples, 0.01%)</title><rect x="242.6" y="389" width="0.2" height="15.0" fill="rgb(243,79,12)" rx="2" ry="2" />
<text  x="245.61" y="399.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (283 samples, 4.24%)</title><rect x="169.8" y="405" width="50.0" height="15.0" fill="rgb(216,197,21)" rx="2" ry="2" />
<text  x="172.78" y="415.5" >ac_tr..</text>
</g>
<g >
<title>node_init (1 samples, 0.01%)</title><rect x="1186.3" y="597" width="0.2" height="15.0" fill="rgb(243,83,12)" rx="2" ry="2" />
<text  x="1189.29" y="607.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (3 samples, 0.04%)</title><rect x="165.0" y="517" width="0.5" height="15.0" fill="rgb(211,186,25)" rx="2" ry="2" />
<text  x="168.01" y="527.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="156.5" y="485" width="0.2" height="15.0" fill="rgb(218,9,52)" rx="2" ry="2" />
<text  x="159.53" y="495.5" ></text>
</g>
<g >
<title>node_find_next (133 samples, 1.99%)</title><rect x="315.8" y="389" width="23.5" height="15.0" fill="rgb(243,113,43)" rx="2" ry="2" />
<text  x="318.78" y="399.5" >n..</text>
</g>
<g >
<title>ac_trie_traverse_setfailure (957 samples, 14.33%)</title><rect x="877.7" y="181" width="169.1" height="15.0" fill="rgb(249,117,46)" rx="2" ry="2" />
<text  x="880.68" y="191.5" >ac_trie_traverse_setf..</text>
</g>
<g >
<title>node_book_replacement (1 samples, 0.01%)</title><rect x="1063.3" y="101" width="0.1" height="15.0" fill="rgb(238,223,10)" rx="2" ry="2" />
<text  x="1066.27" y="111.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (87 samples, 1.30%)</title><rect x="1093.1" y="405" width="15.4" height="15.0" fill="rgb(246,35,20)" rx="2" ry="2" />
<text  x="1096.14" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_node_allocator (1 samples, 0.01%)</title><rect x="1188.6" y="597" width="0.2" height="15.0" fill="rgb(252,135,22)" rx="2" ry="2" />
<text  x="1191.59" y="607.5" ></text>
</g>
<g >
<title>node_find_next (5 samples, 0.07%)</title><rect x="80.0" y="517" width="0.9" height="15.0" fill="rgb(233,124,45)" rx="2" ry="2" />
<text  x="82.99" y="527.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (178 samples, 2.67%)</title><rect x="846.2" y="181" width="31.5" height="15.0" fill="rgb(219,24,34)" rx="2" ry="2" />
<text  x="849.22" y="191.5" >ac..</text>
</g>
<g >
<title>node_book_replacement (5 samples, 0.07%)</title><rect x="1069.3" y="421" width="0.9" height="15.0" fill="rgb(210,19,10)" rx="2" ry="2" />
<text  x="1072.28" y="431.5" ></text>
</g>
<g >
<title>_dl_start (7 samples, 0.10%)</title><rect x="11.1" y="581" width="1.2" height="15.0" fill="rgb(224,76,8)" rx="2" ry="2" />
<text  x="14.06" y="591.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (224 samples, 3.36%)</title><rect x="647.4" y="261" width="39.6" height="15.0" fill="rgb(246,14,0)" rx="2" ry="2" />
<text  x="650.37" y="271.5" >ac_..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (8 samples, 0.12%)</title><rect x="147.0" y="485" width="1.4" height="15.0" fill="rgb(254,72,54)" rx="2" ry="2" />
<text  x="149.98" y="495.5" ></text>
</g>
<g >
<title>free@plt (1 samples, 0.01%)</title><rect x="1107.5" y="341" width="0.1" height="15.0" fill="rgb(212,122,1)" rx="2" ry="2" />
<text  x="1110.46" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate (1 samples, 0.01%)</title><rect x="112.2" y="501" width="0.1" height="15.0" fill="rgb(253,229,50)" rx="2" ry="2" />
<text  x="115.16" y="511.5" ></text>
</g>
<g >
<title>__GI_qsort (1 samples, 0.01%)</title><rect x="227.8" y="389" width="0.1" height="15.0" fill="rgb(224,183,37)" rx="2" ry="2" />
<text  x="230.76" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_state (1 samples, 0.01%)</title><rect x="153.5" y="517" width="0.2" height="15.0" fill="rgb(243,24,52)" rx="2" ry="2" />
<text  x="156.52" y="527.5" ></text>
</g>
<g >
<title>node_collect_matches (18 samples, 0.27%)</title><rect x="212.6" y="373" width="3.1" height="15.0" fill="rgb(245,177,39)" rx="2" ry="2" />
<text  x="215.56" y="383.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1 samples, 0.01%)</title><rect x="140.3" y="469" width="0.1" height="15.0" fill="rgb(219,198,35)" rx="2" ry="2" />
<text  x="143.27" y="479.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (8 samples, 0.12%)</title><rect x="122.6" y="517" width="1.4" height="15.0" fill="rgb(236,191,10)" rx="2" ry="2" />
<text  x="125.59" y="527.5" ></text>
</g>
<g >
<title>mpool_malloc (47 samples, 0.70%)</title><rect x="63.7" y="501" width="8.3" height="15.0" fill="rgb(251,121,34)" rx="2" ry="2" />
<text  x="66.73" y="511.5" ></text>
</g>
<g >
<title>dl_main (6 samples, 0.09%)</title><rect x="11.2" y="549" width="1.1" height="15.0" fill="rgb(211,182,30)" rx="2" ry="2" />
<text  x="14.24" y="559.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="242.6" y="373" width="0.2" height="15.0" fill="rgb(247,190,2)" rx="2" ry="2" />
<text  x="245.61" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (5 samples, 0.07%)</title><rect x="162.2" y="533" width="0.9" height="15.0" fill="rgb(239,166,31)" rx="2" ry="2" />
<text  x="165.18" y="543.5" ></text>
</g>
<g >
<title>node_book_replacement (6 samples, 0.09%)</title><rect x="1068.2" y="405" width="1.1" height="15.0" fill="rgb(246,229,16)" rx="2" ry="2" />
<text  x="1071.22" y="415.5" ></text>
</g>
<g >
<title>node_accept_pattern (11 samples, 0.16%)</title><rect x="28.4" y="533" width="1.9" height="15.0" fill="rgb(211,15,37)" rx="2" ry="2" />
<text  x="31.38" y="543.5" ></text>
</g>
<g >
<title>_int_malloc (3 samples, 0.04%)</title><rect x="159.0" y="405" width="0.5" height="15.0" fill="rgb(241,163,3)" rx="2" ry="2" />
<text  x="162.00" y="415.5" ></text>
</g>
<g >
<title>free@plt (1 samples, 0.01%)</title><rect x="1108.0" y="357" width="0.2" height="15.0" fill="rgb(240,188,30)" rx="2" ry="2" />
<text  x="1110.99" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (2 samples, 0.03%)</title><rect x="161.3" y="517" width="0.4" height="15.0" fill="rgb(211,57,25)" rx="2" ry="2" />
<text  x="164.30" y="527.5" ></text>
</g>
<g >
<title>ac_trie_release (362 samples, 5.42%)</title><rect x="1074.8" y="549" width="63.9" height="15.0" fill="rgb(236,124,35)" rx="2" ry="2" />
<text  x="1077.76" y="559.5" >ac_trie..</text>
</g>
<g >
<title>ac_trie_traverse_action (4 samples, 0.06%)</title><rect x="1102.5" y="101" width="0.7" height="15.0" fill="rgb(253,88,2)" rx="2" ry="2" />
<text  x="1105.51" y="111.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (19 samples, 0.28%)</title><rect x="173.8" y="133" width="3.4" height="15.0" fill="rgb(209,45,35)" rx="2" ry="2" />
<text  x="176.85" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1 samples, 0.01%)</title><rect x="124.2" y="549" width="0.2" height="15.0" fill="rgb(229,174,42)" rx="2" ry="2" />
<text  x="127.18" y="559.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (8 samples, 0.12%)</title><rect x="1062.6" y="181" width="1.4" height="15.0" fill="rgb(219,213,45)" rx="2" ry="2" />
<text  x="1065.56" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (81 samples, 1.21%)</title><rect x="126.3" y="517" width="14.3" height="15.0" fill="rgb(251,159,10)" rx="2" ry="2" />
<text  x="129.30" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (1 samples, 0.01%)</title><rect x="117.5" y="549" width="0.1" height="15.0" fill="rgb(248,16,31)" rx="2" ry="2" />
<text  x="120.47" y="559.5" ></text>
</g>
<g >
<title>__GI___qsort_r (3 samples, 0.04%)</title><rect x="242.4" y="453" width="0.6" height="15.0" fill="rgb(211,96,2)" rx="2" ry="2" />
<text  x="245.43" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (83 samples, 1.24%)</title><rect x="125.9" y="533" width="14.7" height="15.0" fill="rgb(239,156,31)" rx="2" ry="2" />
<text  x="128.95" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (3 samples, 0.04%)</title><rect x="1163.8" y="437" width="0.6" height="15.0" fill="rgb(221,146,29)" rx="2" ry="2" />
<text  x="1166.84" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::allocate (1 samples, 0.01%)</title><rect x="1189.3" y="597" width="0.2" height="15.0" fill="rgb(219,54,11)" rx="2" ry="2" />
<text  x="1192.29" y="607.5" ></text>
</g>
<g >
<title>ac_trie_finalize (5,142 samples, 77.02%)</title><rect x="165.7" y="549" width="908.9" height="15.0" fill="rgb(213,217,34)" rx="2" ry="2" />
<text  x="168.72" y="559.5" >ac_trie_finalize</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (1 samples, 0.01%)</title><rect x="140.4" y="469" width="0.2" height="15.0" fill="rgb(228,63,9)" rx="2" ry="2" />
<text  x="143.44" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.01%)</title><rect x="165.0" y="485" width="0.2" height="15.0" fill="rgb(225,67,29)" rx="2" ry="2" />
<text  x="168.01" y="495.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;::operator++ (1 samples, 0.01%)</title><rect x="114.3" y="437" width="0.2" height="15.0" fill="rgb(212,101,33)" rx="2" ry="2" />
<text  x="117.28" y="447.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (12 samples, 0.18%)</title><rect x="113.0" y="485" width="2.2" height="15.0" fill="rgb(211,205,53)" rx="2" ry="2" />
<text  x="116.05" y="495.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="239.8" y="405" width="0.2" height="15.0" fill="rgb(233,20,17)" rx="2" ry="2" />
<text  x="242.78" y="415.5" ></text>
</g>
<g >
<title>std::operator!=&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (4 samples, 0.06%)</title><rect x="164.1" y="469" width="0.7" height="15.0" fill="rgb(233,43,47)" rx="2" ry="2" />
<text  x="167.13" y="479.5" ></text>
</g>
<g >
<title>_int_free (77 samples, 1.15%)</title><rect x="1138.7" y="453" width="13.7" height="15.0" fill="rgb(220,172,8)" rx="2" ry="2" />
<text  x="1141.74" y="463.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (144 samples, 2.16%)</title><rect x="1049.1" y="469" width="25.5" height="15.0" fill="rgb(248,89,0)" rx="2" ry="2" />
<text  x="1052.13" y="479.5" >m..</text>
</g>
<g >
<title>__GI___libc_free (13 samples, 0.19%)</title><rect x="1158.0" y="437" width="2.3" height="15.0" fill="rgb(244,195,41)" rx="2" ry="2" />
<text  x="1161.01" y="447.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.12%)</title><rect x="122.6" y="533" width="1.4" height="15.0" fill="rgb(216,178,53)" rx="2" ry="2" />
<text  x="125.59" y="543.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (220 samples, 3.30%)</title><rect x="608.1" y="277" width="38.9" height="15.0" fill="rgb(226,55,40)" rx="2" ry="2" />
<text  x="611.13" y="287.5" >ac_..</text>
</g>
<g >
<title>ac_trie_traverse_setfailure (749 samples, 11.22%)</title><rect x="914.4" y="165" width="132.4" height="15.0" fill="rgb(213,110,24)" rx="2" ry="2" />
<text  x="917.44" y="175.5" >ac_trie_traverse..</text>
</g>
<g >
<title>ac_trie_traverse_action (11 samples, 0.16%)</title><rect x="1102.0" y="213" width="1.9" height="15.0" fill="rgb(243,58,33)" rx="2" ry="2" />
<text  x="1104.98" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (2 samples, 0.03%)</title><rect x="1187.9" y="597" width="0.3" height="15.0" fill="rgb(231,177,50)" rx="2" ry="2" />
<text  x="1190.88" y="607.5" ></text>
</g>
<g >
<title>node_sort_edges (2 samples, 0.03%)</title><rect x="178.3" y="117" width="0.3" height="15.0" fill="rgb(246,221,18)" rx="2" ry="2" />
<text  x="181.27" y="127.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple&lt;void, true&gt; (1 samples, 0.01%)</title><rect x="1189.8" y="597" width="0.2" height="15.0" fill="rgb(228,171,40)" rx="2" ry="2" />
<text  x="1192.82" y="607.5" ></text>
</g>
<g >
<title>__GI___libc_free (2 samples, 0.03%)</title><rect x="1108.2" y="373" width="0.3" height="15.0" fill="rgb(247,101,41)" rx="2" ry="2" />
<text  x="1111.16" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (47 samples, 0.70%)</title><rect x="1156.4" y="501" width="8.3" height="15.0" fill="rgb(251,205,45)" rx="2" ry="2" />
<text  x="1159.42" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_free (6 samples, 0.09%)</title><rect x="1164.9" y="485" width="1.1" height="15.0" fill="rgb(206,167,3)" rx="2" ry="2" />
<text  x="1167.90" y="495.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (69 samples, 1.03%)</title><rect x="173.5" y="213" width="12.2" height="15.0" fill="rgb(231,134,23)" rx="2" ry="2" />
<text  x="176.50" y="223.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.03%)</title><rect x="159.5" y="453" width="0.4" height="15.0" fill="rgb(210,75,34)" rx="2" ry="2" />
<text  x="162.53" y="463.5" ></text>
</g>
<g >
<title>node_book_replacement (1 samples, 0.01%)</title><rect x="1178.7" y="597" width="0.2" height="15.0" fill="rgb(219,112,28)" rx="2" ry="2" />
<text  x="1181.69" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (39 samples, 0.58%)</title><rect x="1157.7" y="485" width="6.8" height="15.0" fill="rgb(212,195,21)" rx="2" ry="2" />
<text  x="1160.65" y="495.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (50 samples, 0.75%)</title><rect x="1097.7" y="341" width="8.9" height="15.0" fill="rgb(221,13,33)" rx="2" ry="2" />
<text  x="1100.74" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="118.3" y="565" width="0.2" height="15.0" fill="rgb(235,226,35)" rx="2" ry="2" />
<text  x="121.35" y="575.5" ></text>
</g>
<g >
<title>node_find_next (144 samples, 2.16%)</title><rect x="285.9" y="405" width="25.5" height="15.0" fill="rgb(230,150,19)" rx="2" ry="2" />
<text  x="288.91" y="415.5" >n..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (77 samples, 1.15%)</title><rect x="1138.7" y="469" width="13.7" height="15.0" fill="rgb(246,116,6)" rx="2" ry="2" />
<text  x="1141.74" y="479.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (4,338 samples, 64.98%)</title><rect x="282.2" y="437" width="766.8" height="15.0" fill="rgb(235,198,19)" rx="2" ry="2" />
<text  x="285.20" y="447.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.01%)</title><rect x="125.8" y="501" width="0.1" height="15.0" fill="rgb(212,50,44)" rx="2" ry="2" />
<text  x="128.77" y="511.5" ></text>
</g>
<g >
<title>node_release_vectors (1 samples, 0.01%)</title><rect x="1102.7" y="53" width="0.2" height="15.0" fill="rgb(228,81,44)" rx="2" ry="2" />
<text  x="1105.68" y="63.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (74 samples, 1.11%)</title><rect x="140.6" y="533" width="13.1" height="15.0" fill="rgb(231,199,13)" rx="2" ry="2" />
<text  x="143.62" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (15 samples, 0.22%)</title><rect x="121.4" y="565" width="2.6" height="15.0" fill="rgb(239,85,4)" rx="2" ry="2" />
<text  x="124.35" y="575.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (309 samples, 4.63%)</title><rect x="169.3" y="421" width="54.6" height="15.0" fill="rgb(244,136,5)" rx="2" ry="2" />
<text  x="172.25" y="431.5" >ac_tr..</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (8 samples, 0.12%)</title><rect x="163.4" y="485" width="1.4" height="15.0" fill="rgb(236,196,23)" rx="2" ry="2" />
<text  x="166.42" y="495.5" ></text>
</g>
<g >
<title>node_release_vectors (2 samples, 0.03%)</title><rect x="1103.9" y="229" width="0.4" height="15.0" fill="rgb(247,169,11)" rx="2" ry="2" />
<text  x="1106.92" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (14 samples, 0.21%)</title><rect x="121.5" y="549" width="2.5" height="15.0" fill="rgb(243,92,44)" rx="2" ry="2" />
<text  x="124.53" y="559.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (437 samples, 6.55%)</title><rect x="165.7" y="533" width="77.3" height="15.0" fill="rgb(243,126,25)" rx="2" ry="2" />
<text  x="168.72" y="543.5" >ac_trie_..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_buckets (1 samples, 0.01%)</title><rect x="146.8" y="469" width="0.2" height="15.0" fill="rgb(248,134,17)" rx="2" ry="2" />
<text  x="149.81" y="479.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (210 samples, 3.15%)</title><rect x="372.5" y="373" width="37.1" height="15.0" fill="rgb(227,229,3)" rx="2" ry="2" />
<text  x="375.52" y="383.5" >ac_..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.01%)</title><rect x="113.9" y="421" width="0.2" height="15.0" fill="rgb(252,109,30)" rx="2" ry="2" />
<text  x="116.93" y="431.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="111.6" y="453" width="0.2" height="15.0" fill="rgb(229,67,47)" rx="2" ry="2" />
<text  x="114.63" y="463.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.01%)</title><rect x="156.5" y="501" width="0.2" height="15.0" fill="rgb(215,40,28)" rx="2" ry="2" />
<text  x="159.53" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (4 samples, 0.06%)</title><rect x="158.8" y="453" width="0.7" height="15.0" fill="rgb(220,52,52)" rx="2" ry="2" />
<text  x="161.83" y="463.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (4,538 samples, 67.97%)</title><rect x="247.0" y="469" width="802.1" height="15.0" fill="rgb(229,8,47)" rx="2" ry="2" />
<text  x="250.03" y="479.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>_int_malloc (5 samples, 0.07%)</title><rect x="29.3" y="485" width="0.8" height="15.0" fill="rgb(237,201,9)" rx="2" ry="2" />
<text  x="32.27" y="495.5" ></text>
</g>
<g >
<title>[unknown] (7 samples, 0.10%)</title><rect x="12.5" y="597" width="1.2" height="15.0" fill="rgb(220,226,49)" rx="2" ry="2" />
<text  x="15.47" y="607.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="108.3" y="517" width="0.2" height="15.0" fill="rgb(241,51,47)" rx="2" ry="2" />
<text  x="111.27" y="527.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (5 samples, 0.07%)</title><rect x="29.3" y="501" width="0.8" height="15.0" fill="rgb(247,169,28)" rx="2" ry="2" />
<text  x="32.27" y="511.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (103 samples, 1.54%)</title><rect x="1091.2" y="437" width="18.2" height="15.0" fill="rgb(222,117,30)" rx="2" ry="2" />
<text  x="1094.20" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (2 samples, 0.03%)</title><rect x="147.7" y="469" width="0.3" height="15.0" fill="rgb(223,38,7)" rx="2" ry="2" />
<text  x="150.69" y="479.5" ></text>
</g>
<g >
<title>node_book_replacement (2 samples, 0.03%)</title><rect x="1065.7" y="309" width="0.4" height="15.0" fill="rgb(218,100,22)" rx="2" ry="2" />
<text  x="1068.74" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.01%)</title><rect x="1187.5" y="597" width="0.2" height="15.0" fill="rgb(240,83,29)" rx="2" ry="2" />
<text  x="1190.53" y="607.5" ></text>
</g>
<g >
<title>benchmark (6,676 samples, 100.00%)</title><rect x="10.0" y="613" width="1180.0" height="15.0" fill="rgb(223,127,54)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >benchmark</text>
</g>
<g >
<title>std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="110.2" y="517" width="0.2" height="15.0" fill="rgb(212,226,50)" rx="2" ry="2" />
<text  x="113.22" y="527.5" ></text>
</g>
<g >
<title>__strrchr_avx2 (1 samples, 0.01%)</title><rect x="14.6" y="517" width="0.2" height="15.0" fill="rgb(219,120,0)" rx="2" ry="2" />
<text  x="17.60" y="527.5" ></text>
</g>
<g >
<title>random_word (40 samples, 0.60%)</title><rect x="1169.7" y="581" width="7.0" height="15.0" fill="rgb(211,211,6)" rx="2" ry="2" />
<text  x="1172.67" y="591.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (137 samples, 2.05%)</title><rect x="173.1" y="293" width="24.3" height="15.0" fill="rgb(232,174,34)" rx="2" ry="2" />
<text  x="176.14" y="303.5" >a..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate (1 samples, 0.01%)</title><rect x="112.2" y="485" width="0.1" height="15.0" fill="rgb(242,34,17)" rx="2" ry="2" />
<text  x="115.16" y="495.5" ></text>
</g>
<g >
<title>mpool_free (159 samples, 2.38%)</title><rect x="1110.6" y="533" width="28.1" height="15.0" fill="rgb(205,213,45)" rx="2" ry="2" />
<text  x="1113.64" y="543.5" >m..</text>
</g>
<g >
<title>AhoCorasickPlus::finalize (5,142 samples, 77.02%)</title><rect x="165.7" y="565" width="908.9" height="15.0" fill="rgb(233,37,20)" rx="2" ry="2" />
<text  x="168.72" y="575.5" >AhoCorasickPlus::finalize</text>
</g>
<g >
<title>mf_repdata_bookreplacements (144 samples, 2.16%)</title><rect x="1049.1" y="485" width="25.5" height="15.0" fill="rgb(225,227,14)" rx="2" ry="2" />
<text  x="1052.13" y="495.5" >m..</text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::begin (1 samples, 0.01%)</title><rect x="161.7" y="565" width="0.1" height="15.0" fill="rgb(251,69,46)" rx="2" ry="2" />
<text  x="164.65" y="575.5" ></text>
</g>
<g >
<title>_int_free (4 samples, 0.06%)</title><rect x="1109.6" y="437" width="0.7" height="15.0" fill="rgb(220,167,19)" rx="2" ry="2" />
<text  x="1112.58" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~_Vector_base (1 samples, 0.01%)</title><rect x="165.5" y="549" width="0.2" height="15.0" fill="rgb(219,172,37)" rx="2" ry="2" />
<text  x="168.54" y="559.5" ></text>
</g>
<g >
<title>node_collect_matches (14 samples, 0.21%)</title><rect x="240.0" y="469" width="2.4" height="15.0" fill="rgb(247,200,10)" rx="2" ry="2" />
<text  x="242.96" y="479.5" ></text>
</g>
<g >
<title>node_find_next (106 samples, 1.59%)</title><rect x="263.5" y="421" width="18.7" height="15.0" fill="rgb(211,194,40)" rx="2" ry="2" />
<text  x="266.46" y="431.5" ></text>
</g>
<g >
<title>node_grow_matched_vector (1 samples, 0.01%)</title><rect x="185.3" y="165" width="0.2" height="15.0" fill="rgb(232,196,33)" rx="2" ry="2" />
<text  x="188.34" y="175.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="112.5" y="453" width="0.2" height="15.0" fill="rgb(209,179,40)" rx="2" ry="2" />
<text  x="115.52" y="463.5" ></text>
</g>
<g >
<title>node_collect_matches (19 samples, 0.28%)</title><rect x="187.6" y="229" width="3.4" height="15.0" fill="rgb(233,110,54)" rx="2" ry="2" />
<text  x="190.64" y="239.5" ></text>
</g>
<g >
<title>node_sort_edges (2 samples, 0.03%)</title><rect x="1186.8" y="597" width="0.4" height="15.0" fill="rgb(242,198,4)" rx="2" ry="2" />
<text  x="1189.82" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::allocate (1 samples, 0.01%)</title><rect x="146.8" y="453" width="0.2" height="15.0" fill="rgb(206,175,29)" rx="2" ry="2" />
<text  x="149.81" y="463.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.01%)</title><rect x="13.2" y="581" width="0.2" height="15.0" fill="rgb(223,184,38)" rx="2" ry="2" />
<text  x="16.18" y="591.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="1107.3" y="341" width="0.2" height="15.0" fill="rgb(205,73,9)" rx="2" ry="2" />
<text  x="1110.28" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (4 samples, 0.06%)</title><rect x="1178.0" y="581" width="0.7" height="15.0" fill="rgb(245,183,9)" rx="2" ry="2" />
<text  x="1180.98" y="591.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (57 samples, 0.85%)</title><rect x="173.5" y="197" width="10.1" height="15.0" fill="rgb(231,183,4)" rx="2" ry="2" />
<text  x="176.50" y="207.5" ></text>
</g>
<g >
<title>node_release_vectors (2 samples, 0.03%)</title><rect x="1109.0" y="421" width="0.4" height="15.0" fill="rgb(242,20,30)" rx="2" ry="2" />
<text  x="1112.05" y="431.5" ></text>
</g>
<g >
<title>node_find_next (2 samples, 0.03%)</title><rect x="1047.4" y="277" width="0.3" height="15.0" fill="rgb(245,22,20)" rx="2" ry="2" />
<text  x="1050.36" y="287.5" ></text>
</g>
<g >
<title>node_sort_edges (3 samples, 0.04%)</title><rect x="242.4" y="469" width="0.6" height="15.0" fill="rgb(219,86,22)" rx="2" ry="2" />
<text  x="245.43" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (6 samples, 0.09%)</title><rect x="1176.9" y="581" width="1.1" height="15.0" fill="rgb(215,50,49)" rx="2" ry="2" />
<text  x="1179.92" y="591.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (4,561 samples, 68.32%)</title><rect x="243.0" y="501" width="806.1" height="15.0" fill="rgb(243,34,30)" rx="2" ry="2" />
<text  x="245.96" y="511.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>_int_free (2 samples, 0.03%)</title><rect x="1104.6" y="245" width="0.4" height="15.0" fill="rgb(239,143,34)" rx="2" ry="2" />
<text  x="1107.63" y="255.5" ></text>
</g>
<g >
<title>node_assign_id (1 samples, 0.01%)</title><rect x="72.0" y="501" width="0.2" height="15.0" fill="rgb(212,207,23)" rx="2" ry="2" />
<text  x="75.04" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_addr (1 samples, 0.01%)</title><rect x="140.1" y="421" width="0.2" height="15.0" fill="rgb(233,111,4)" rx="2" ry="2" />
<text  x="143.09" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (212 samples, 3.18%)</title><rect x="124.2" y="565" width="37.5" height="15.0" fill="rgb(231,114,32)" rx="2" ry="2" />
<text  x="127.18" y="575.5" >std..</text>
</g>
<g >
<title>_int_free (3 samples, 0.04%)</title><rect x="1166.0" y="485" width="0.5" height="15.0" fill="rgb(253,23,27)" rx="2" ry="2" />
<text  x="1168.96" y="495.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.01%)</title><rect x="12.5" y="581" width="0.2" height="15.0" fill="rgb(253,33,37)" rx="2" ry="2" />
<text  x="15.47" y="591.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (6 samples, 0.09%)</title><rect x="173.8" y="85" width="1.1" height="15.0" fill="rgb(216,134,30)" rx="2" ry="2" />
<text  x="176.85" y="95.5" ></text>
</g>
<g >
<title>node_find_next (1 samples, 0.01%)</title><rect x="1049.0" y="437" width="0.1" height="15.0" fill="rgb(229,220,39)" rx="2" ry="2" />
<text  x="1051.95" y="447.5" ></text>
</g>
<g >
<title>node_find_next (141 samples, 2.11%)</title><rect x="950.1" y="117" width="25.0" height="15.0" fill="rgb(254,194,41)" rx="2" ry="2" />
<text  x="953.15" y="127.5" >n..</text>
</g>
<g >
<title>ac_trie_traverse_action (3 samples, 0.04%)</title><rect x="1102.5" y="85" width="0.5" height="15.0" fill="rgb(254,207,7)" rx="2" ry="2" />
<text  x="1105.51" y="95.5" ></text>
</g>
<g >
<title>_int_free (20 samples, 0.30%)</title><rect x="1160.3" y="437" width="3.5" height="15.0" fill="rgb(220,189,3)" rx="2" ry="2" />
<text  x="1163.31" y="447.5" ></text>
</g>
<g >
<title>node_sort_edges (1 samples, 0.01%)</title><rect x="185.5" y="181" width="0.2" height="15.0" fill="rgb(216,88,13)" rx="2" ry="2" />
<text  x="188.52" y="191.5" ></text>
</g>
<g >
<title>Paraglob::add (822 samples, 12.31%)</title><rect x="20.4" y="581" width="145.3" height="15.0" fill="rgb(238,79,50)" rx="2" ry="2" />
<text  x="23.43" y="591.5" >Paraglob::add</text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (1 samples, 0.01%)</title><rect x="163.2" y="517" width="0.2" height="15.0" fill="rgb(227,190,25)" rx="2" ry="2" />
<text  x="166.24" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (3 samples, 0.04%)</title><rect x="142.9" y="485" width="0.5" height="15.0" fill="rgb(237,15,23)" rx="2" ry="2" />
<text  x="145.92" y="495.5" ></text>
</g>
<g >
<title>node_find_next (199 samples, 2.98%)</title><rect x="651.8" y="245" width="35.2" height="15.0" fill="rgb(249,208,41)" rx="2" ry="2" />
<text  x="654.79" y="255.5" >no..</text>
</g>
<g >
<title>mf_repdata_bookreplacements (12 samples, 0.18%)</title><rect x="1062.4" y="213" width="2.1" height="15.0" fill="rgb(242,55,51)" rx="2" ry="2" />
<text  x="1065.38" y="223.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (13 samples, 0.19%)</title><rect x="112.9" y="501" width="2.3" height="15.0" fill="rgb(211,119,31)" rx="2" ry="2" />
<text  x="115.87" y="511.5" ></text>
</g>
<g >
<title>node_grow_matched_vector (6 samples, 0.09%)</title><rect x="29.1" y="517" width="1.0" height="15.0" fill="rgb(224,37,1)" rx="2" ry="2" />
<text  x="32.09" y="527.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.07%)</title><rect x="1177.1" y="565" width="0.9" height="15.0" fill="rgb(253,39,49)" rx="2" ry="2" />
<text  x="1180.10" y="575.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (1 samples, 0.01%)</title><rect x="1062.6" y="69" width="0.1" height="15.0" fill="rgb(220,193,30)" rx="2" ry="2" />
<text  x="1065.56" y="79.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (1 samples, 0.01%)</title><rect x="1102.7" y="69" width="0.2" height="15.0" fill="rgb(209,137,50)" rx="2" ry="2" />
<text  x="1105.68" y="79.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (8 samples, 0.12%)</title><rect x="118.7" y="549" width="1.4" height="15.0" fill="rgb(215,111,0)" rx="2" ry="2" />
<text  x="121.70" y="559.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (38 samples, 0.57%)</title><rect x="1099.0" y="309" width="6.7" height="15.0" fill="rgb(219,38,26)" rx="2" ry="2" />
<text  x="1101.97" y="319.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (1 samples, 0.01%)</title><rect x="1062.6" y="53" width="0.1" height="15.0" fill="rgb(254,204,44)" rx="2" ry="2" />
<text  x="1065.56" y="63.5" ></text>
</g>
<g >
<title>node_find_next (206 samples, 3.09%)</title><rect x="691.6" y="229" width="36.4" height="15.0" fill="rgb(212,206,37)" rx="2" ry="2" />
<text  x="694.56" y="239.5" >nod..</text>
</g>
<g >
<title>node_add_edge (163 samples, 2.44%)</title><rect x="32.8" y="517" width="28.8" height="15.0" fill="rgb(232,162,19)" rx="2" ry="2" />
<text  x="35.80" y="527.5" >no..</text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_Hash_node (1 samples, 0.01%)</title><rect x="1188.2" y="597" width="0.2" height="15.0" fill="rgb(248,37,52)" rx="2" ry="2" />
<text  x="1191.23" y="607.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_base (1 samples, 0.01%)</title><rect x="117.5" y="533" width="0.1" height="15.0" fill="rgb(252,73,22)" rx="2" ry="2" />
<text  x="120.47" y="543.5" ></text>
</g>
<g >
<title>node_find_next (132 samples, 1.98%)</title><rect x="81.4" y="533" width="23.3" height="15.0" fill="rgb(222,126,6)" rx="2" ry="2" />
<text  x="84.41" y="543.5" >n..</text>
</g>
<g >
<title>_int_malloc (51 samples, 0.76%)</title><rect x="52.2" y="469" width="9.1" height="15.0" fill="rgb(206,128,53)" rx="2" ry="2" />
<text  x="55.24" y="479.5" ></text>
</g>
<g >
<title>node_release_vectors (1 samples, 0.01%)</title><rect x="1110.5" y="485" width="0.1" height="15.0" fill="rgb(228,48,21)" rx="2" ry="2" />
<text  x="1113.46" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="155.8" y="517" width="0.2" height="15.0" fill="rgb(208,180,1)" rx="2" ry="2" />
<text  x="158.82" y="527.5" ></text>
</g>
<g >
<title>node_collect_matches (6 samples, 0.09%)</title><rect x="178.6" y="149" width="1.1" height="15.0" fill="rgb(237,33,3)" rx="2" ry="2" />
<text  x="181.62" y="159.5" ></text>
</g>
<g >
<title>node_edge_compare (1 samples, 0.01%)</title><rect x="242.3" y="405" width="0.1" height="15.0" fill="rgb(245,155,28)" rx="2" ry="2" />
<text  x="245.25" y="415.5" ></text>
</g>
<g >
<title>std::max&lt;unsigned long&gt; (2 samples, 0.03%)</title><rect x="116.1" y="485" width="0.3" height="15.0" fill="rgb(207,205,20)" rx="2" ry="2" />
<text  x="119.05" y="495.5" ></text>
</g>
<g >
<title>__GI___qsort_r (2 samples, 0.03%)</title><rect x="178.3" y="101" width="0.3" height="15.0" fill="rgb(238,10,39)" rx="2" ry="2" />
<text  x="181.27" y="111.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="110.0" y="485" width="0.2" height="15.0" fill="rgb(205,122,52)" rx="2" ry="2" />
<text  x="113.04" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (1 samples, 0.01%)</title><rect x="146.8" y="485" width="0.2" height="15.0" fill="rgb(206,143,53)" rx="2" ry="2" />
<text  x="149.81" y="495.5" ></text>
</g>
<g >
<title>node_collect_matches (14 samples, 0.21%)</title><rect x="181.1" y="181" width="2.5" height="15.0" fill="rgb(230,105,2)" rx="2" ry="2" />
<text  x="184.10" y="191.5" ></text>
</g>
<g >
<title>_dl_relocate_object (5 samples, 0.07%)</title><rect x="11.4" y="533" width="0.9" height="15.0" fill="rgb(238,89,47)" rx="2" ry="2" />
<text  x="14.41" y="543.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (42 samples, 0.63%)</title><rect x="1098.6" y="325" width="7.4" height="15.0" fill="rgb(249,67,2)" rx="2" ry="2" />
<text  x="1101.62" y="335.5" ></text>
</g>
<g >
<title>node_sort_edges (3 samples, 0.04%)</title><rect x="200.4" y="277" width="0.5" height="15.0" fill="rgb(236,18,18)" rx="2" ry="2" />
<text  x="203.36" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (1 samples, 0.01%)</title><rect x="1156.8" y="485" width="0.1" height="15.0" fill="rgb(226,159,20)" rx="2" ry="2" />
<text  x="1159.77" y="495.5" ></text>
</g>
<g >
<title>_int_malloc (5 samples, 0.07%)</title><rect x="120.5" y="517" width="0.9" height="15.0" fill="rgb(223,100,7)" rx="2" ry="2" />
<text  x="123.47" y="527.5" ></text>
</g>
<g >
<title>node_collect_matches (11 samples, 0.16%)</title><rect x="185.7" y="213" width="1.9" height="15.0" fill="rgb(235,77,54)" rx="2" ry="2" />
<text  x="188.69" y="223.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (7 samples, 0.10%)</title><rect x="120.1" y="533" width="1.3" height="15.0" fill="rgb(207,179,15)" rx="2" ry="2" />
<text  x="123.12" y="543.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (57 samples, 0.85%)</title><rect x="250.0" y="453" width="10.1" height="15.0" fill="rgb(227,82,5)" rx="2" ry="2" />
<text  x="253.03" y="463.5" ></text>
</g>
<g >
<title>node_collect_matches (3 samples, 0.04%)</title><rect x="173.8" y="53" width="0.6" height="15.0" fill="rgb(236,7,20)" rx="2" ry="2" />
<text  x="176.85" y="63.5" ></text>
</g>
<g >
<title>node_find_next (194 samples, 2.91%)</title><rect x="612.7" y="261" width="34.3" height="15.0" fill="rgb(226,143,43)" rx="2" ry="2" />
<text  x="615.73" y="271.5" >no..</text>
</g>
<g >
<title>__GI___qsort_r (1 samples, 0.01%)</title><rect x="227.6" y="389" width="0.2" height="15.0" fill="rgb(231,173,3)" rx="2" ry="2" />
<text  x="230.58" y="399.5" ></text>
</g>
<g >
<title>benchmark (6,572 samples, 98.44%)</title><rect x="17.1" y="597" width="1161.6" height="15.0" fill="rgb(215,178,45)" rx="2" ry="2" />
<text  x="20.07" y="607.5" >benchmark</text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (10 samples, 0.15%)</title><rect x="1164.7" y="565" width="1.8" height="15.0" fill="rgb(231,52,12)" rx="2" ry="2" />
<text  x="1167.72" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (77 samples, 1.15%)</title><rect x="1138.7" y="533" width="13.7" height="15.0" fill="rgb(212,221,17)" rx="2" ry="2" />
<text  x="1141.74" y="543.5" ></text>
</g>
<g >
<title>node_find_next (30 samples, 0.45%)</title><rect x="254.8" y="437" width="5.3" height="15.0" fill="rgb(209,117,17)" rx="2" ry="2" />
<text  x="257.80" y="447.5" ></text>
</g>
<g >
<title>__GI___qsort_r (1 samples, 0.01%)</title><rect x="174.7" y="37" width="0.2" height="15.0" fill="rgb(216,35,29)" rx="2" ry="2" />
<text  x="177.73" y="47.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (2 samples, 0.03%)</title><rect x="242.6" y="421" width="0.4" height="15.0" fill="rgb(215,134,45)" rx="2" ry="2" />
<text  x="245.61" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.01%)</title><rect x="163.2" y="469" width="0.2" height="15.0" fill="rgb(208,18,0)" rx="2" ry="2" />
<text  x="166.24" y="479.5" ></text>
</g>
<g >
<title>node_sort_edges (2 samples, 0.03%)</title><rect x="194.7" y="245" width="0.4" height="15.0" fill="rgb(207,173,34)" rx="2" ry="2" />
<text  x="197.71" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (3 samples, 0.04%)</title><rect x="142.9" y="501" width="0.5" height="15.0" fill="rgb(207,208,17)" rx="2" ry="2" />
<text  x="145.92" y="511.5" ></text>
</g>
<g >
<title>qsort@plt (1 samples, 0.01%)</title><rect x="194.9" y="229" width="0.2" height="15.0" fill="rgb(226,187,36)" rx="2" ry="2" />
<text  x="197.88" y="239.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.01%)</title><rect x="212.4" y="309" width="0.2" height="15.0" fill="rgb(212,204,38)" rx="2" ry="2" />
<text  x="215.38" y="319.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (34 samples, 0.51%)</title><rect x="173.7" y="165" width="6.0" height="15.0" fill="rgb(244,185,31)" rx="2" ry="2" />
<text  x="176.67" y="175.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (163 samples, 2.44%)</title><rect x="282.6" y="421" width="28.8" height="15.0" fill="rgb(218,0,16)" rx="2" ry="2" />
<text  x="285.55" y="431.5" >ac..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (211 samples, 3.16%)</title><rect x="124.4" y="549" width="37.3" height="15.0" fill="rgb(230,22,41)" rx="2" ry="2" />
<text  x="127.36" y="559.5" >std..</text>
</g>
<g >
<title>ac_trie_traverse_action (253 samples, 3.79%)</title><rect x="171.0" y="389" width="44.7" height="15.0" fill="rgb(230,157,22)" rx="2" ry="2" />
<text  x="174.02" y="399.5" >ac_t..</text>
</g>
<g >
<title>node_find_next (2 samples, 0.03%)</title><rect x="1046.3" y="117" width="0.4" height="15.0" fill="rgb(231,67,36)" rx="2" ry="2" />
<text  x="1049.30" y="127.5" ></text>
</g>
<g >
<title>node_find_next (1 samples, 0.01%)</title><rect x="1046.7" y="133" width="0.1" height="15.0" fill="rgb(211,74,32)" rx="2" ry="2" />
<text  x="1049.65" y="143.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.03%)</title><rect x="1101.6" y="213" width="0.4" height="15.0" fill="rgb(241,80,27)" rx="2" ry="2" />
<text  x="1104.62" y="223.5" ></text>
</g>
<g >
<title>__GI___qsort_r (2 samples, 0.03%)</title><rect x="212.2" y="325" width="0.4" height="15.0" fill="rgb(239,96,2)" rx="2" ry="2" />
<text  x="215.20" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find_first_of (13 samples, 0.19%)</title><rect x="105.4" y="549" width="2.3" height="15.0" fill="rgb(240,48,51)" rx="2" ry="2" />
<text  x="108.45" y="559.5" ></text>
</g>
<g >
<title>node_sort_edges (1 samples, 0.01%)</title><rect x="219.6" y="373" width="0.2" height="15.0" fill="rgb(229,187,25)" rx="2" ry="2" />
<text  x="222.63" y="383.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (1,360 samples, 20.37%)</title><rect x="806.6" y="213" width="240.4" height="15.0" fill="rgb(222,165,17)" rx="2" ry="2" />
<text  x="809.62" y="223.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>_init (1 samples, 0.01%)</title><rect x="14.6" y="549" width="0.2" height="15.0" fill="rgb(218,33,22)" rx="2" ry="2" />
<text  x="17.60" y="559.5" ></text>
</g>
<g >
<title>_dl_map_object_deps (1 samples, 0.01%)</title><rect x="11.2" y="533" width="0.2" height="15.0" fill="rgb(239,213,24)" rx="2" ry="2" />
<text  x="14.24" y="543.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (4 samples, 0.06%)</title><rect x="1102.5" y="133" width="0.7" height="15.0" fill="rgb(251,87,28)" rx="2" ry="2" />
<text  x="1105.51" y="143.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (1 samples, 0.01%)</title><rect x="1166.5" y="581" width="0.2" height="15.0" fill="rgb(235,173,23)" rx="2" ry="2" />
<text  x="1169.49" y="591.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (1 samples, 0.01%)</title><rect x="112.0" y="485" width="0.2" height="15.0" fill="rgb(210,225,43)" rx="2" ry="2" />
<text  x="114.99" y="495.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.01%)</title><rect x="1176.7" y="533" width="0.2" height="15.0" fill="rgb(253,54,31)" rx="2" ry="2" />
<text  x="1179.74" y="543.5" ></text>
</g>
<g >
<title>openaux (1 samples, 0.01%)</title><rect x="11.2" y="501" width="0.2" height="15.0" fill="rgb(233,136,42)" rx="2" ry="2" />
<text  x="14.24" y="511.5" ></text>
</g>
<g >
<title>node_collect_matches (16 samples, 0.24%)</title><rect x="200.9" y="309" width="2.8" height="15.0" fill="rgb(240,42,35)" rx="2" ry="2" />
<text  x="203.89" y="319.5" ></text>
</g>
<g >
<title>node_collect_matches (6 samples, 0.09%)</title><rect x="174.9" y="85" width="1.1" height="15.0" fill="rgb(229,66,51)" rx="2" ry="2" />
<text  x="177.91" y="95.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (3,826 samples, 57.31%)</title><rect x="372.5" y="389" width="676.3" height="15.0" fill="rgb(208,213,20)" rx="2" ry="2" />
<text  x="375.52" y="399.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (3 samples, 0.04%)</title><rect x="165.0" y="533" width="0.5" height="15.0" fill="rgb(219,155,15)" rx="2" ry="2" />
<text  x="168.01" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="109.9" y="517" width="0.3" height="15.0" fill="rgb(220,82,51)" rx="2" ry="2" />
<text  x="112.87" y="527.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (75 samples, 1.12%)</title><rect x="1056.0" y="421" width="13.3" height="15.0" fill="rgb(240,158,54)" rx="2" ry="2" />
<text  x="1059.02" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::deallocate (2 samples, 0.03%)</title><rect x="112.3" y="485" width="0.4" height="15.0" fill="rgb(218,64,54)" rx="2" ry="2" />
<text  x="115.34" y="495.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="118.5" y="565" width="0.2" height="15.0" fill="rgb(232,100,52)" rx="2" ry="2" />
<text  x="121.53" y="575.5" ></text>
</g>
<g >
<title>node_book_replacement (1 samples, 0.01%)</title><rect x="1067.0" y="357" width="0.2" height="15.0" fill="rgb(241,93,23)" rx="2" ry="2" />
<text  x="1069.98" y="367.5" ></text>
</g>
<g >
<title>node_find_next (3 samples, 0.04%)</title><rect x="1048.1" y="357" width="0.5" height="15.0" fill="rgb(236,185,7)" rx="2" ry="2" />
<text  x="1051.07" y="367.5" ></text>
</g>
<g >
<title>node_init (44 samples, 0.66%)</title><rect x="72.2" y="501" width="7.8" height="15.0" fill="rgb(242,159,40)" rx="2" ry="2" />
<text  x="75.22" y="511.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (122 samples, 1.83%)</title><rect x="173.5" y="277" width="21.6" height="15.0" fill="rgb(215,102,25)" rx="2" ry="2" />
<text  x="176.50" y="287.5" >a..</text>
</g>
<g >
<title>ac_trie_traverse_action (203 samples, 3.04%)</title><rect x="1074.8" y="517" width="35.8" height="15.0" fill="rgb(219,52,7)" rx="2" ry="2" />
<text  x="1077.76" y="527.5" >ac_..</text>
</g>
<g >
<title>__GI___qsort_r (1 samples, 0.01%)</title><rect x="215.6" y="341" width="0.1" height="15.0" fill="rgb(235,171,42)" rx="2" ry="2" />
<text  x="218.56" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (1 samples, 0.01%)</title><rect x="1164.7" y="485" width="0.2" height="15.0" fill="rgb(221,85,26)" rx="2" ry="2" />
<text  x="1167.72" y="495.5" ></text>
</g>
<g >
<title>node_collect_matches (12 samples, 0.18%)</title><rect x="191.0" y="245" width="2.1" height="15.0" fill="rgb(208,7,17)" rx="2" ry="2" />
<text  x="193.99" y="255.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (10 samples, 0.15%)</title><rect x="240.7" y="421" width="1.7" height="15.0" fill="rgb(229,123,14)" rx="2" ry="2" />
<text  x="243.66" y="431.5" ></text>
</g>
<g >
<title>node_book_replacement (10 samples, 0.15%)</title><rect x="1072.8" y="453" width="1.8" height="15.0" fill="rgb(249,160,40)" rx="2" ry="2" />
<text  x="1075.81" y="463.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, false&gt;::_M_head (1 samples, 0.01%)</title><rect x="160.4" y="437" width="0.2" height="15.0" fill="rgb(220,61,34)" rx="2" ry="2" />
<text  x="163.42" y="447.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.01%)</title><rect x="118.2" y="565" width="0.1" height="15.0" fill="rgb(213,14,43)" rx="2" ry="2" />
<text  x="121.17" y="575.5" ></text>
</g>
<g >
<title>node_collect_matches (23 samples, 0.34%)</title><rect x="223.9" y="421" width="4.0" height="15.0" fill="rgb(222,115,20)" rx="2" ry="2" />
<text  x="226.87" y="431.5" ></text>
</g>
<g >
<title>node_assign_id (6 samples, 0.09%)</title><rect x="78.9" y="485" width="1.1" height="15.0" fill="rgb(213,48,17)" rx="2" ry="2" />
<text  x="81.93" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (3 samples, 0.04%)</title><rect x="115.3" y="485" width="0.6" height="15.0" fill="rgb(253,193,27)" rx="2" ry="2" />
<text  x="118.34" y="495.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.04%)</title><rect x="1166.7" y="581" width="0.5" height="15.0" fill="rgb(212,137,48)" rx="2" ry="2" />
<text  x="1169.67" y="591.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (3 samples, 0.04%)</title><rect x="165.0" y="549" width="0.5" height="15.0" fill="rgb(223,150,38)" rx="2" ry="2" />
<text  x="168.01" y="559.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (6 samples, 0.09%)</title><rect x="11.2" y="565" width="1.1" height="15.0" fill="rgb(221,211,43)" rx="2" ry="2" />
<text  x="14.24" y="575.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (8 samples, 0.12%)</title><rect x="156.7" y="469" width="1.4" height="15.0" fill="rgb(229,45,44)" rx="2" ry="2" />
<text  x="159.70" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (8 samples, 0.12%)</title><rect x="163.4" y="533" width="1.4" height="15.0" fill="rgb(210,95,21)" rx="2" ry="2" />
<text  x="166.42" y="543.5" ></text>
</g>
<g >
<title>node_collect_matches (8 samples, 0.12%)</title><rect x="177.2" y="133" width="1.4" height="15.0" fill="rgb(205,225,8)" rx="2" ry="2" />
<text  x="180.21" y="143.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;::operator++ (1 samples, 0.01%)</title><rect x="164.0" y="469" width="0.1" height="15.0" fill="rgb(216,73,52)" rx="2" ry="2" />
<text  x="166.95" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_M_next (23 samples, 0.34%)</title><rect x="1152.4" y="501" width="4.0" height="15.0" fill="rgb(247,136,13)" rx="2" ry="2" />
<text  x="1155.35" y="511.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (4,561 samples, 68.32%)</title><rect x="243.0" y="517" width="806.1" height="15.0" fill="rgb(234,184,39)" rx="2" ry="2" />
<text  x="245.96" y="527.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (10 samples, 0.15%)</title><rect x="113.2" y="453" width="1.8" height="15.0" fill="rgb(250,159,21)" rx="2" ry="2" />
<text  x="116.22" y="463.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.01%)</title><rect x="1098.4" y="309" width="0.2" height="15.0" fill="rgb(247,70,34)" rx="2" ry="2" />
<text  x="1101.44" y="319.5" ></text>
</g>
<g >
<title>node_find_next (120 samples, 1.80%)</title><rect x="977.9" y="101" width="21.2" height="15.0" fill="rgb(220,103,30)" rx="2" ry="2" />
<text  x="980.90" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, false, true&gt;::operator (2 samples, 0.03%)</title><rect x="161.3" y="533" width="0.4" height="15.0" fill="rgb(208,22,40)" rx="2" ry="2" />
<text  x="164.30" y="543.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (203 samples, 3.04%)</title><rect x="1074.8" y="501" width="35.8" height="15.0" fill="rgb(221,53,41)" rx="2" ry="2" />
<text  x="1077.76" y="511.5" >ac_..</text>
</g>
<g >
<title>do_lookup_x (1 samples, 0.01%)</title><rect x="12.1" y="501" width="0.2" height="15.0" fill="rgb(210,201,32)" rx="2" ry="2" />
<text  x="15.12" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::_Tuple_impl (3 samples, 0.04%)</title><rect x="160.1" y="469" width="0.5" height="15.0" fill="rgb(211,98,12)" rx="2" ry="2" />
<text  x="163.06" y="479.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (219 samples, 3.28%)</title><rect x="529.1" y="309" width="38.7" height="15.0" fill="rgb(228,105,22)" rx="2" ry="2" />
<text  x="532.12" y="319.5" >ac_..</text>
</g>
<g >
<title>ac_trie_set_failure (188 samples, 2.82%)</title><rect x="339.3" y="389" width="33.2" height="15.0" fill="rgb(212,220,48)" rx="2" ry="2" />
<text  x="342.29" y="399.5" >ac..</text>
</g>
<g >
<title>node_book_replacement (3 samples, 0.04%)</title><rect x="1067.7" y="389" width="0.5" height="15.0" fill="rgb(245,54,48)" rx="2" ry="2" />
<text  x="1070.69" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (77 samples, 1.15%)</title><rect x="1138.7" y="485" width="13.7" height="15.0" fill="rgb(252,65,40)" rx="2" ry="2" />
<text  x="1141.74" y="495.5" ></text>
</g>
<g >
<title>node_book_replacement (1 samples, 0.01%)</title><rect x="1062.6" y="37" width="0.1" height="15.0" fill="rgb(229,20,35)" rx="2" ry="2" />
<text  x="1065.56" y="47.5" ></text>
</g>
<g >
<title>check_match (1 samples, 0.01%)</title><rect x="12.1" y="485" width="0.2" height="15.0" fill="rgb(227,41,19)" rx="2" ry="2" />
<text  x="15.12" y="495.5" ></text>
</g>
<g >
<title>_int_malloc (8 samples, 0.12%)</title><rect x="156.7" y="453" width="1.4" height="15.0" fill="rgb(218,90,23)" rx="2" ry="2" />
<text  x="159.70" y="463.5" ></text>
</g>
<g >
<title>malloc@plt (1 samples, 0.01%)</title><rect x="61.4" y="485" width="0.2" height="15.0" fill="rgb(234,160,23)" rx="2" ry="2" />
<text  x="64.43" y="495.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (99 samples, 1.48%)</title><rect x="173.5" y="245" width="17.5" height="15.0" fill="rgb(252,20,35)" rx="2" ry="2" />
<text  x="176.50" y="255.5" ></text>
</g>
<g >
<title>node_collect_matches (12 samples, 0.18%)</title><rect x="183.6" y="197" width="2.1" height="15.0" fill="rgb(205,113,35)" rx="2" ry="2" />
<text  x="186.57" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (77 samples, 1.15%)</title><rect x="1138.7" y="517" width="13.7" height="15.0" fill="rgb(232,119,30)" rx="2" ry="2" />
<text  x="1141.74" y="527.5" ></text>
</g>
<g >
<title>node_release_vectors (2 samples, 0.03%)</title><rect x="1105.0" y="277" width="0.3" height="15.0" fill="rgb(215,196,30)" rx="2" ry="2" />
<text  x="1107.98" y="287.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (223 samples, 3.34%)</title><rect x="806.6" y="197" width="39.4" height="15.0" fill="rgb(238,155,3)" rx="2" ry="2" />
<text  x="809.62" y="207.5" >ac_..</text>
</g>
<g >
<title>ac_trie_set_failure (65 samples, 0.97%)</title><rect x="1017.3" y="85" width="11.5" height="15.0" fill="rgb(244,141,29)" rx="2" ry="2" />
<text  x="1020.31" y="95.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (2,715 samples, 40.67%)</title><rect x="567.8" y="309" width="479.9" height="15.0" fill="rgb(252,106,11)" rx="2" ry="2" />
<text  x="570.83" y="319.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>node_sort_edges (1 samples, 0.01%)</title><rect x="179.5" y="133" width="0.2" height="15.0" fill="rgb(231,134,3)" rx="2" ry="2" />
<text  x="182.51" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (2 samples, 0.03%)</title><rect x="125.6" y="517" width="0.3" height="15.0" fill="rgb(210,169,22)" rx="2" ry="2" />
<text  x="128.60" y="527.5" ></text>
</g>
<g >
<title>__GI___qsort_r (4 samples, 0.06%)</title><rect x="223.2" y="373" width="0.7" height="15.0" fill="rgb(250,222,44)" rx="2" ry="2" />
<text  x="226.16" y="383.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple (4 samples, 0.06%)</title><rect x="159.9" y="485" width="0.7" height="15.0" fill="rgb(230,220,44)" rx="2" ry="2" />
<text  x="162.89" y="495.5" ></text>
</g>
<g >
<title>node_collect_matches (3 samples, 0.04%)</title><rect x="174.4" y="69" width="0.5" height="15.0" fill="rgb(209,122,34)" rx="2" ry="2" />
<text  x="177.38" y="79.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (221 samples, 3.31%)</title><rect x="728.3" y="229" width="39.1" height="15.0" fill="rgb(252,27,18)" rx="2" ry="2" />
<text  x="731.32" y="239.5" >ac_..</text>
</g>
<g >
<title>_dl_start_user (1 samples, 0.01%)</title><rect x="14.6" y="597" width="0.2" height="15.0" fill="rgb(227,161,41)" rx="2" ry="2" />
<text  x="17.60" y="607.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;::base (1 samples, 0.01%)</title><rect x="164.7" y="437" width="0.1" height="15.0" fill="rgb(211,80,8)" rx="2" ry="2" />
<text  x="167.66" y="447.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.01%)</title><rect x="112.3" y="453" width="0.2" height="15.0" fill="rgb(205,59,20)" rx="2" ry="2" />
<text  x="115.34" y="463.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (4 samples, 0.06%)</title><rect x="1062.6" y="101" width="0.7" height="15.0" fill="rgb(244,163,11)" rx="2" ry="2" />
<text  x="1065.56" y="111.5" ></text>
</g>
<g >
<title>Paraglob::compile (5,142 samples, 77.02%)</title><rect x="165.7" y="581" width="908.9" height="15.0" fill="rgb(243,142,29)" rx="2" ry="2" />
<text  x="168.72" y="591.5" >Paraglob::compile</text>
</g>
<g >
<title>mf_repdata_bookreplacements (38 samples, 0.57%)</title><rect x="1060.1" y="341" width="6.7" height="15.0" fill="rgb(250,64,52)" rx="2" ry="2" />
<text  x="1063.09" y="351.5" ></text>
</g>
<g >
<title>node_release_vectors (1 samples, 0.01%)</title><rect x="1103.0" y="85" width="0.2" height="15.0" fill="rgb(235,10,32)" rx="2" ry="2" />
<text  x="1106.04" y="95.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (16 samples, 0.24%)</title><rect x="158.1" y="517" width="2.8" height="15.0" fill="rgb(205,148,22)" rx="2" ry="2" />
<text  x="161.12" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.01%)</title><rect x="108.5" y="517" width="0.1" height="15.0" fill="rgb(217,134,20)" rx="2" ry="2" />
<text  x="111.45" y="527.5" ></text>
</g>
<g >
<title>__GI___qsort_r (4 samples, 0.06%)</title><rect x="231.6" y="405" width="0.8" height="15.0" fill="rgb(250,9,14)" rx="2" ry="2" />
<text  x="234.65" y="415.5" ></text>
</g>
<g >
<title>node_book_replacement (3 samples, 0.04%)</title><rect x="1064.7" y="245" width="0.5" height="15.0" fill="rgb(229,75,43)" rx="2" ry="2" />
<text  x="1067.68" y="255.5" ></text>
</g>
<g >
<title>node_book_replacement (15 samples, 0.22%)</title><rect x="1070.2" y="437" width="2.6" height="15.0" fill="rgb(246,13,36)" rx="2" ry="2" />
<text  x="1073.16" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (1 samples, 0.01%)</title><rect x="146.8" y="437" width="0.2" height="15.0" fill="rgb(220,132,34)" rx="2" ry="2" />
<text  x="149.81" y="447.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (3,615 samples, 54.15%)</title><rect x="409.6" y="373" width="639.0" height="15.0" fill="rgb(232,160,8)" rx="2" ry="2" />
<text  x="412.64" y="383.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>mf_repdata_allocbuf (144 samples, 2.16%)</title><rect x="1049.1" y="533" width="25.5" height="15.0" fill="rgb(205,223,43)" rx="2" ry="2" />
<text  x="1052.13" y="543.5" >m..</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (1 samples, 0.01%)</title><rect x="147.9" y="453" width="0.1" height="15.0" fill="rgb(252,186,6)" rx="2" ry="2" />
<text  x="150.87" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (30 samples, 0.45%)</title><rect x="156.0" y="533" width="5.3" height="15.0" fill="rgb(228,109,32)" rx="2" ry="2" />
<text  x="159.00" y="543.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (42 samples, 0.63%)</title><rect x="173.7" y="181" width="7.4" height="15.0" fill="rgb(221,14,2)" rx="2" ry="2" />
<text  x="176.67" y="191.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (54 samples, 0.81%)</title><rect x="1097.6" y="357" width="9.5" height="15.0" fill="rgb(210,68,43)" rx="2" ry="2" />
<text  x="1100.56" y="367.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (3 samples, 0.04%)</title><rect x="111.5" y="485" width="0.5" height="15.0" fill="rgb(245,194,48)" rx="2" ry="2" />
<text  x="114.46" y="495.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.01%)</title><rect x="108.3" y="485" width="0.2" height="15.0" fill="rgb(240,127,45)" rx="2" ry="2" />
<text  x="111.27" y="495.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (5 samples, 0.07%)</title><rect x="1062.6" y="117" width="0.8" height="15.0" fill="rgb(231,4,33)" rx="2" ry="2" />
<text  x="1065.56" y="127.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (1,806 samples, 27.05%)</title><rect x="728.0" y="245" width="319.2" height="15.0" fill="rgb(230,81,42)" rx="2" ry="2" />
<text  x="730.97" y="255.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>node_create (104 samples, 1.56%)</title><rect x="61.6" y="517" width="18.4" height="15.0" fill="rgb(206,124,30)" rx="2" ry="2" />
<text  x="64.61" y="527.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::_M_head (1 samples, 0.01%)</title><rect x="160.4" y="453" width="0.2" height="15.0" fill="rgb(233,121,40)" rx="2" ry="2" />
<text  x="163.42" y="463.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (6 samples, 0.09%)</title><rect x="1062.6" y="149" width="1.0" height="15.0" fill="rgb(229,210,39)" rx="2" ry="2" />
<text  x="1065.56" y="159.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (1 samples, 0.01%)</title><rect x="16.5" y="597" width="0.2" height="15.0" fill="rgb(226,208,18)" rx="2" ry="2" />
<text  x="19.54" y="607.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (1 samples, 0.01%)</title><rect x="1062.6" y="85" width="0.1" height="15.0" fill="rgb(207,91,5)" rx="2" ry="2" />
<text  x="1065.56" y="95.5" ></text>
</g>
<g >
<title>node_grow_outgoing_vector (1 samples, 0.01%)</title><rect x="80.9" y="517" width="0.2" height="15.0" fill="rgb(234,121,42)" rx="2" ry="2" />
<text  x="83.88" y="527.5" ></text>
</g>
<g >
<title>node_find_next (192 samples, 2.88%)</title><rect x="772.7" y="197" width="33.9" height="15.0" fill="rgb(244,40,8)" rx="2" ry="2" />
<text  x="775.69" y="207.5" >no..</text>
</g>
<g >
<title>_int_free (2 samples, 0.03%)</title><rect x="1169.1" y="581" width="0.4" height="15.0" fill="rgb(218,210,14)" rx="2" ry="2" />
<text  x="1172.14" y="591.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (12 samples, 0.18%)</title><rect x="113.0" y="469" width="2.2" height="15.0" fill="rgb(220,96,10)" rx="2" ry="2" />
<text  x="116.05" y="479.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (190 samples, 2.85%)</title><rect x="172.3" y="341" width="33.5" height="15.0" fill="rgb(234,114,39)" rx="2" ry="2" />
<text  x="175.26" y="351.5" >ac..</text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="1105.2" y="261" width="0.1" height="15.0" fill="rgb(216,115,34)" rx="2" ry="2" />
<text  x="1108.16" y="271.5" ></text>
</g>
<g >
<title>node_book_replacement (2 samples, 0.03%)</title><rect x="1064.2" y="197" width="0.3" height="15.0" fill="rgb(208,192,33)" rx="2" ry="2" />
<text  x="1067.15" y="207.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (122 samples, 1.83%)</title><rect x="1051.2" y="453" width="21.6" height="15.0" fill="rgb(208,198,18)" rx="2" ry="2" />
<text  x="1054.25" y="463.5" >m..</text>
</g>
<g >
<title>ac_trie_set_failure (185 samples, 2.77%)</title><rect x="914.6" y="149" width="32.7" height="15.0" fill="rgb(205,26,43)" rx="2" ry="2" />
<text  x="917.62" y="159.5" >ac..</text>
</g>
<g >
<title>node_find_next (56 samples, 0.84%)</title><rect x="1018.9" y="69" width="9.9" height="15.0" fill="rgb(209,25,38)" rx="2" ry="2" />
<text  x="1021.90" y="79.5" ></text>
</g>
<g >
<title>node_collect_matches (4 samples, 0.06%)</title><rect x="176.5" y="117" width="0.7" height="15.0" fill="rgb(223,152,34)" rx="2" ry="2" />
<text  x="179.50" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (5 samples, 0.07%)</title><rect x="107.7" y="533" width="0.9" height="15.0" fill="rgb(225,226,48)" rx="2" ry="2" />
<text  x="110.74" y="543.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (54 samples, 0.81%)</title><rect x="1058.1" y="389" width="9.6" height="15.0" fill="rgb(215,224,27)" rx="2" ry="2" />
<text  x="1061.14" y="399.5" ></text>
</g>
<g >
<title>node_release_vectors (2 samples, 0.03%)</title><rect x="1186.5" y="597" width="0.3" height="15.0" fill="rgb(241,11,33)" rx="2" ry="2" />
<text  x="1189.46" y="607.5" ></text>
</g>
<g >
<title>node_find_next (2 samples, 0.03%)</title><rect x="246.7" y="453" width="0.3" height="15.0" fill="rgb(211,132,40)" rx="2" ry="2" />
<text  x="249.67" y="463.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (45 samples, 0.67%)</title><rect x="1059.2" y="373" width="8.0" height="15.0" fill="rgb(227,99,4)" rx="2" ry="2" />
<text  x="1062.20" y="383.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (2,039 samples, 30.54%)</title><rect x="687.0" y="261" width="360.4" height="15.0" fill="rgb(212,189,5)" rx="2" ry="2" />
<text  x="689.96" y="271.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="112.2" y="453" width="0.1" height="15.0" fill="rgb(205,112,8)" rx="2" ry="2" />
<text  x="115.16" y="463.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="163.2" y="485" width="0.2" height="15.0" fill="rgb(224,155,6)" rx="2" ry="2" />
<text  x="166.24" y="495.5" ></text>
</g>
<g >
<title>all (6,676 samples, 100%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(214,28,1)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (39 samples, 0.58%)</title><rect x="1157.7" y="469" width="6.8" height="15.0" fill="rgb(252,94,31)" rx="2" ry="2" />
<text  x="1160.65" y="479.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10 samples, 0.15%)</title><rect x="1164.7" y="501" width="1.8" height="15.0" fill="rgb(218,170,33)" rx="2" ry="2" />
<text  x="1167.72" y="511.5" ></text>
</g>
<g >
<title>node_find_next (1 samples, 0.01%)</title><rect x="1047.2" y="245" width="0.2" height="15.0" fill="rgb(239,14,47)" rx="2" ry="2" />
<text  x="1050.18" y="255.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="1189.5" y="597" width="0.1" height="15.0" fill="rgb(207,174,34)" rx="2" ry="2" />
<text  x="1192.47" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.01%)</title><rect x="111.6" y="437" width="0.2" height="15.0" fill="rgb(216,34,21)" rx="2" ry="2" />
<text  x="114.63" y="447.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (229 samples, 3.43%)</title><rect x="488.3" y="325" width="40.5" height="15.0" fill="rgb(230,23,26)" rx="2" ry="2" />
<text  x="491.29" y="335.5" >ac_..</text>
</g>
<g >
<title>node_book_replacement (1 samples, 0.01%)</title><rect x="1064.0" y="181" width="0.2" height="15.0" fill="rgb(216,65,45)" rx="2" ry="2" />
<text  x="1066.98" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_v (1 samples, 0.01%)</title><rect x="140.1" y="469" width="0.2" height="15.0" fill="rgb(253,137,40)" rx="2" ry="2" />
<text  x="143.09" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.01%)</title><rect x="146.8" y="421" width="0.2" height="15.0" fill="rgb(221,83,49)" rx="2" ry="2" />
<text  x="149.81" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt;::deallocate (4 samples, 0.06%)</title><rect x="1156.9" y="469" width="0.8" height="15.0" fill="rgb(251,19,51)" rx="2" ry="2" />
<text  x="1159.95" y="479.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="1102.9" y="53" width="0.1" height="15.0" fill="rgb(211,43,26)" rx="2" ry="2" />
<text  x="1105.86" y="63.5" ></text>
</g>
<g >
<title>__GI___strdup (2 samples, 0.03%)</title><rect x="1167.6" y="581" width="0.3" height="15.0" fill="rgb(254,227,36)" rx="2" ry="2" />
<text  x="1170.55" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::max_size (1 samples, 0.01%)</title><rect x="116.8" y="469" width="0.1" height="15.0" fill="rgb(254,128,24)" rx="2" ry="2" />
<text  x="119.76" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (27 samples, 0.40%)</title><rect x="133.7" y="501" width="4.8" height="15.0" fill="rgb(232,172,26)" rx="2" ry="2" />
<text  x="136.73" y="511.5" ></text>
</g>
<g >
<title>node_book_replacement (1 samples, 0.01%)</title><rect x="1063.8" y="165" width="0.2" height="15.0" fill="rgb(219,25,34)" rx="2" ry="2" />
<text  x="1066.80" y="175.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (70 samples, 1.05%)</title><rect x="48.9" y="485" width="12.4" height="15.0" fill="rgb(250,34,22)" rx="2" ry="2" />
<text  x="51.89" y="495.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;::move_iterator (1 samples, 0.01%)</title><rect x="112.9" y="469" width="0.1" height="15.0" fill="rgb(212,188,53)" rx="2" ry="2" />
<text  x="115.87" y="479.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (1,136 samples, 17.02%)</title><rect x="846.0" y="197" width="200.8" height="15.0" fill="rgb(219,10,21)" rx="2" ry="2" />
<text  x="849.04" y="207.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>ac_trie_traverse_setfailure (4,172 samples, 62.49%)</title><rect x="311.4" y="421" width="737.4" height="15.0" fill="rgb(220,49,1)" rx="2" ry="2" />
<text  x="314.36" y="431.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_deallocate (2 samples, 0.03%)</title><rect x="112.3" y="501" width="0.4" height="15.0" fill="rgb(245,225,11)" rx="2" ry="2" />
<text  x="115.34" y="511.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="1103.7" y="181" width="0.2" height="15.0" fill="rgb(215,219,34)" rx="2" ry="2" />
<text  x="1106.74" y="191.5" ></text>
</g>
<g >
<title>node_find_next (92 samples, 1.38%)</title><rect x="1000.9" y="85" width="16.2" height="15.0" fill="rgb(232,82,28)" rx="2" ry="2" />
<text  x="1003.87" y="95.5" ></text>
</g>
<g >
<title>node_find_next (1 samples, 0.01%)</title><rect x="1046.8" y="197" width="0.2" height="15.0" fill="rgb(240,228,16)" rx="2" ry="2" />
<text  x="1049.83" y="207.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.01%)</title><rect x="146.8" y="373" width="0.2" height="15.0" fill="rgb(205,113,11)" rx="2" ry="2" />
<text  x="149.81" y="383.5" ></text>
</g>
<g >
<title>_int_free (2 samples, 0.03%)</title><rect x="1107.6" y="357" width="0.4" height="15.0" fill="rgb(224,43,17)" rx="2" ry="2" />
<text  x="1110.63" y="367.5" ></text>
</g>
<g >
<title>node_release_vectors (1 samples, 0.01%)</title><rect x="1104.3" y="245" width="0.2" height="15.0" fill="rgb(233,59,8)" rx="2" ry="2" />
<text  x="1107.28" y="255.5" ></text>
</g>
<g >
<title>node_sort_edges (2 samples, 0.03%)</title><rect x="215.4" y="357" width="0.3" height="15.0" fill="rgb(239,213,1)" rx="2" ry="2" />
<text  x="218.39" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (2 samples, 0.03%)</title><rect x="148.0" y="469" width="0.4" height="15.0" fill="rgb(222,8,34)" rx="2" ry="2" />
<text  x="151.04" y="479.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.01%)</title><rect x="1098.4" y="325" width="0.2" height="15.0" fill="rgb(213,215,42)" rx="2" ry="2" />
<text  x="1101.44" y="335.5" ></text>
</g>
<g >
<title>call_init.part.0 (1 samples, 0.01%)</title><rect x="14.6" y="565" width="0.2" height="15.0" fill="rgb(212,83,7)" rx="2" ry="2" />
<text  x="17.60" y="575.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~pair (39 samples, 0.58%)</title><rect x="1157.7" y="453" width="6.8" height="15.0" fill="rgb(241,57,21)" rx="2" ry="2" />
<text  x="1160.65" y="463.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (2 samples, 0.03%)</title><rect x="11.9" y="517" width="0.4" height="15.0" fill="rgb(221,171,45)" rx="2" ry="2" />
<text  x="14.94" y="527.5" ></text>
</g>
<g >
<title>node_book_replacement (4 samples, 0.06%)</title><rect x="1066.1" y="325" width="0.7" height="15.0" fill="rgb(216,149,26)" rx="2" ry="2" />
<text  x="1069.10" y="335.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (27 samples, 0.40%)</title><rect x="1061.0" y="309" width="4.7" height="15.0" fill="rgb(221,17,18)" rx="2" ry="2" />
<text  x="1063.97" y="319.5" ></text>
</g>
<g >
<title>_int_free (3 samples, 0.04%)</title><rect x="1108.5" y="389" width="0.5" height="15.0" fill="rgb(245,100,53)" rx="2" ry="2" />
<text  x="1111.52" y="399.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (20 samples, 0.30%)</title><rect x="1061.7" y="277" width="3.5" height="15.0" fill="rgb(222,162,4)" rx="2" ry="2" />
<text  x="1064.68" y="287.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (3,394 samples, 50.84%)</title><rect x="448.2" y="357" width="599.9" height="15.0" fill="rgb(236,97,22)" rx="2" ry="2" />
<text  x="451.17" y="367.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.01%)</title><rect x="165.4" y="485" width="0.1" height="15.0" fill="rgb(241,185,43)" rx="2" ry="2" />
<text  x="168.37" y="495.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="165.5" y="485" width="0.2" height="15.0" fill="rgb(224,138,5)" rx="2" ry="2" />
<text  x="168.54" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (27 samples, 0.40%)</title><rect x="133.7" y="485" width="4.8" height="15.0" fill="rgb(222,172,34)" rx="2" ry="2" />
<text  x="136.73" y="495.5" ></text>
</g>
<g >
<title>node_collect_matches (23 samples, 0.34%)</title><rect x="219.8" y="405" width="4.1" height="15.0" fill="rgb(245,11,29)" rx="2" ry="2" />
<text  x="222.81" y="415.5" ></text>
</g>
<g >
<title>node_book_replacement (1 samples, 0.01%)</title><rect x="1063.4" y="133" width="0.2" height="15.0" fill="rgb(207,214,12)" rx="2" ry="2" />
<text  x="1066.45" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (4 samples, 0.06%)</title><rect x="115.2" y="501" width="0.7" height="15.0" fill="rgb(233,102,17)" rx="2" ry="2" />
<text  x="118.17" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.01%)</title><rect x="1176.7" y="581" width="0.2" height="15.0" fill="rgb(222,179,11)" rx="2" ry="2" />
<text  x="1179.74" y="591.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.01%)</title><rect x="1104.1" y="213" width="0.2" height="15.0" fill="rgb(220,141,49)" rx="2" ry="2" />
<text  x="1107.10" y="223.5" ></text>
</g>
<g >
<title>msort_with_tmp.part.0 (9 samples, 0.13%)</title><rect x="240.7" y="405" width="1.6" height="15.0" fill="rgb(253,74,15)" rx="2" ry="2" />
<text  x="243.66" y="415.5" ></text>
</g>
<g >
<title>node_find_next (1 samples, 0.01%)</title><rect x="1046.1" y="101" width="0.2" height="15.0" fill="rgb(236,111,33)" rx="2" ry="2" />
<text  x="1049.12" y="111.5" ></text>
</g>
<g >
<title>mpool_new_block (6 samples, 0.09%)</title><rect x="71.0" y="485" width="1.0" height="15.0" fill="rgb(214,225,14)" rx="2" ry="2" />
<text  x="73.98" y="495.5" ></text>
</g>
<g >
<title>sysmalloc (2 samples, 0.03%)</title><rect x="71.7" y="437" width="0.3" height="15.0" fill="rgb(244,64,13)" rx="2" ry="2" />
<text  x="74.69" y="447.5" ></text>
</g>
<g >
<title>node_release_vectors (3 samples, 0.04%)</title><rect x="1106.6" y="341" width="0.5" height="15.0" fill="rgb(249,96,27)" rx="2" ry="2" />
<text  x="1109.57" y="351.5" ></text>
</g>
<g >
<title>rand (2 samples, 0.03%)</title><rect x="1166.7" y="565" width="0.3" height="15.0" fill="rgb(235,39,29)" rx="2" ry="2" />
<text  x="1169.67" y="575.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (23 samples, 0.34%)</title><rect x="1100.4" y="261" width="4.1" height="15.0" fill="rgb(212,180,4)" rx="2" ry="2" />
<text  x="1103.39" y="271.5" ></text>
</g>
<g >
<title>node_find_next (190 samples, 2.85%)</title><rect x="376.1" y="357" width="33.5" height="15.0" fill="rgb(221,37,49)" rx="2" ry="2" />
<text  x="379.05" y="367.5" >no..</text>
</g>
<g >
<title>ac_trie_traverse_action (15 samples, 0.22%)</title><rect x="173.8" y="117" width="2.7" height="15.0" fill="rgb(251,226,37)" rx="2" ry="2" />
<text  x="176.85" y="127.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="1104.3" y="229" width="0.2" height="15.0" fill="rgb(219,163,18)" rx="2" ry="2" />
<text  x="1107.28" y="239.5" ></text>
</g>
<g >
<title>node_sort_edges (3 samples, 0.04%)</title><rect x="227.4" y="405" width="0.5" height="15.0" fill="rgb(245,80,42)" rx="2" ry="2" />
<text  x="230.41" y="415.5" ></text>
</g>
<g >
<title>Paraglob::~Paraglob (519 samples, 7.77%)</title><rect x="1074.8" y="581" width="91.7" height="15.0" fill="rgb(243,67,45)" rx="2" ry="2" />
<text  x="1077.76" y="591.5" >Paraglob::..</text>
</g>
<g >
<title>_int_malloc (1 samples, 0.01%)</title><rect x="162.7" y="469" width="0.2" height="15.0" fill="rgb(217,121,20)" rx="2" ry="2" />
<text  x="165.71" y="479.5" ></text>
</g>
<g >
<title>node_release_vectors (2 samples, 0.03%)</title><rect x="1108.2" y="389" width="0.3" height="15.0" fill="rgb(221,41,1)" rx="2" ry="2" />
<text  x="1111.16" y="399.5" ></text>
</g>
<g >
<title>std::__to_address&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; (1 samples, 0.01%)</title><rect x="156.4" y="517" width="0.1" height="15.0" fill="rgb(220,197,0)" rx="2" ry="2" />
<text  x="159.35" y="527.5" ></text>
</g>
<g >
<title>std::forward&lt;std::piecewise_construct_t const&amp;&gt; (1 samples, 0.01%)</title><rect x="160.9" y="517" width="0.2" height="15.0" fill="rgb(247,151,51)" rx="2" ry="2" />
<text  x="163.95" y="527.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (335 samples, 5.02%)</title><rect x="168.7" y="437" width="59.2" height="15.0" fill="rgb(226,61,3)" rx="2" ry="2" />
<text  x="171.72" y="447.5" >ac_tri..</text>
</g>
<g >
<title>node_collect_matches (12 samples, 0.18%)</title><rect x="203.7" y="325" width="2.1" height="15.0" fill="rgb(227,6,17)" rx="2" ry="2" />
<text  x="206.72" y="335.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (563 samples, 8.43%)</title><rect x="947.3" y="149" width="99.5" height="15.0" fill="rgb(250,139,50)" rx="2" ry="2" />
<text  x="950.32" y="159.5" >ac_trie_trav..</text>
</g>
<g >
<title>ac_trie_set_failure (31 samples, 0.46%)</title><rect x="1040.6" y="53" width="5.5" height="15.0" fill="rgb(242,57,26)" rx="2" ry="2" />
<text  x="1043.64" y="63.5" ></text>
</g>
<g >
<title>node_release_vectors (1 samples, 0.01%)</title><rect x="1103.7" y="197" width="0.2" height="15.0" fill="rgb(239,228,48)" rx="2" ry="2" />
<text  x="1106.74" y="207.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (1,583 samples, 23.71%)</title><rect x="767.4" y="229" width="279.8" height="15.0" fill="rgb(221,199,11)" rx="2" ry="2" />
<text  x="770.38" y="239.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>node_find_next (197 samples, 2.95%)</title><rect x="533.0" y="293" width="34.8" height="15.0" fill="rgb(225,213,48)" rx="2" ry="2" />
<text  x="536.01" y="303.5" >no..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.01%)</title><rect x="1187.7" y="597" width="0.2" height="15.0" fill="rgb(222,211,51)" rx="2" ry="2" />
<text  x="1190.70" y="607.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.01%)</title><rect x="1167.9" y="581" width="0.2" height="15.0" fill="rgb(237,124,49)" rx="2" ry="2" />
<text  x="1170.91" y="591.5" ></text>
</g>
<g >
<title>ac_trie_set_failure (222 samples, 3.33%)</title><rect x="767.4" y="213" width="39.2" height="15.0" fill="rgb(246,89,10)" rx="2" ry="2" />
<text  x="770.38" y="223.5" >ac_..</text>
</g>
<g >
<title>std::move&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (1 samples, 0.01%)</title><rect x="108.6" y="549" width="0.2" height="15.0" fill="rgb(237,123,36)" rx="2" ry="2" />
<text  x="111.63" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_ptr (1 samples, 0.01%)</title><rect x="161.5" y="501" width="0.2" height="15.0" fill="rgb(227,78,42)" rx="2" ry="2" />
<text  x="164.48" y="511.5" ></text>
</g>
<g >
<title>Paraglob::get_meta_words (72 samples, 1.08%)</title><rect x="104.9" y="565" width="12.7" height="15.0" fill="rgb(205,11,11)" rx="2" ry="2" />
<text  x="107.92" y="575.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1 samples, 0.01%)</title><rect x="159.7" y="437" width="0.2" height="15.0" fill="rgb(248,167,38)" rx="2" ry="2" />
<text  x="162.71" y="447.5" ></text>
</g>
<g >
<title>std::_Construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="113.8" y="437" width="0.3" height="15.0" fill="rgb(254,162,47)" rx="2" ry="2" />
<text  x="116.75" y="447.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (31 samples, 0.46%)</title><rect x="1040.6" y="69" width="5.5" height="15.0" fill="rgb(252,154,21)" rx="2" ry="2" />
<text  x="1043.64" y="79.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (98 samples, 1.47%)</title><rect x="1028.8" y="85" width="17.3" height="15.0" fill="rgb(246,35,39)" rx="2" ry="2" />
<text  x="1031.80" y="95.5" ></text>
</g>
<g >
<title>__GI___qsort_r (1 samples, 0.01%)</title><rect x="185.5" y="165" width="0.2" height="15.0" fill="rgb(250,154,24)" rx="2" ry="2" />
<text  x="188.52" y="175.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (2 samples, 0.03%)</title><rect x="106.3" y="533" width="0.4" height="15.0" fill="rgb(249,91,18)" rx="2" ry="2" />
<text  x="109.33" y="543.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.12%)</title><rect x="156.7" y="485" width="1.4" height="15.0" fill="rgb(251,171,42)" rx="2" ry="2" />
<text  x="159.70" y="495.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (6 samples, 0.09%)</title><rect x="1102.3" y="149" width="1.1" height="15.0" fill="rgb(219,228,35)" rx="2" ry="2" />
<text  x="1105.33" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (1 samples, 0.01%)</title><rect x="1188.4" y="597" width="0.2" height="15.0" fill="rgb(212,13,37)" rx="2" ry="2" />
<text  x="1191.41" y="607.5" ></text>
</g>
<g >
<title>__GI___qsort_r (1 samples, 0.01%)</title><rect x="179.5" y="117" width="0.2" height="15.0" fill="rgb(223,205,24)" rx="2" ry="2" />
<text  x="182.51" y="127.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (64 samples, 0.96%)</title><rect x="1056.9" y="405" width="11.3" height="15.0" fill="rgb(222,33,4)" rx="2" ry="2" />
<text  x="1059.91" y="415.5" ></text>
</g>
<g >
<title>std::__make_move_if_noexcept_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::move_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; &gt; (1 samples, 0.01%)</title><rect x="112.9" y="485" width="0.1" height="15.0" fill="rgb(205,212,53)" rx="2" ry="2" />
<text  x="115.87" y="495.5" ></text>
</g>
<g >
<title>std::__addressof&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="111.8" y="469" width="0.2" height="15.0" fill="rgb(247,4,37)" rx="2" ry="2" />
<text  x="114.81" y="479.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1 samples, 0.01%)</title><rect x="163.1" y="533" width="0.1" height="15.0" fill="rgb(208,137,24)" rx="2" ry="2" />
<text  x="166.07" y="543.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.01%)</title><rect x="1107.1" y="341" width="0.2" height="15.0" fill="rgb(254,215,30)" rx="2" ry="2" />
<text  x="1110.10" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (70 samples, 1.05%)</title><rect x="1152.4" y="517" width="12.3" height="15.0" fill="rgb(223,117,18)" rx="2" ry="2" />
<text  x="1155.35" y="527.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="1105.5" y="277" width="0.2" height="15.0" fill="rgb(243,103,48)" rx="2" ry="2" />
<text  x="1108.51" y="287.5" ></text>
</g>
<g >
<title>node_sort_edges (4 samples, 0.06%)</title><rect x="239.2" y="437" width="0.8" height="15.0" fill="rgb(234,133,4)" rx="2" ry="2" />
<text  x="242.25" y="447.5" ></text>
</g>
<g >
<title>node_grow_outgoing_vector (128 samples, 1.92%)</title><rect x="39.0" y="501" width="22.6" height="15.0" fill="rgb(241,226,29)" rx="2" ry="2" />
<text  x="41.99" y="511.5" >n..</text>
</g>
<g >
<title>ac_trie_traverse_action (9 samples, 0.13%)</title><rect x="1102.2" y="197" width="1.5" height="15.0" fill="rgb(209,189,41)" rx="2" ry="2" />
<text  x="1105.15" y="207.5" ></text>
</g>
<g >
<title>__GI___qsort_r (1 samples, 0.01%)</title><rect x="180.9" y="133" width="0.2" height="15.0" fill="rgb(221,2,36)" rx="2" ry="2" />
<text  x="183.92" y="143.5" ></text>
</g>
<g >
<title>node_book_replacement (1 samples, 0.01%)</title><rect x="1064.5" y="229" width="0.2" height="15.0" fill="rgb(205,164,6)" rx="2" ry="2" />
<text  x="1067.51" y="239.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="1106.2" y="309" width="0.2" height="15.0" fill="rgb(250,51,23)" rx="2" ry="2" />
<text  x="1109.22" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::end (1 samples, 0.01%)</title><rect x="117.3" y="517" width="0.2" height="15.0" fill="rgb(211,110,37)" rx="2" ry="2" />
<text  x="120.29" y="527.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (7 samples, 0.10%)</title><rect x="1062.6" y="165" width="1.2" height="15.0" fill="rgb(249,20,2)" rx="2" ry="2" />
<text  x="1065.56" y="175.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (2 samples, 0.03%)</title><rect x="117.6" y="565" width="0.4" height="15.0" fill="rgb(247,162,48)" rx="2" ry="2" />
<text  x="120.64" y="575.5" ></text>
</g>
<g >
<title>std::__make_move_if_noexcept_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::move_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; &gt; (2 samples, 0.03%)</title><rect x="1188.8" y="597" width="0.3" height="15.0" fill="rgb(249,122,31)" rx="2" ry="2" />
<text  x="1191.76" y="607.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="162.7" y="485" width="0.2" height="15.0" fill="rgb(213,206,24)" rx="2" ry="2" />
<text  x="165.71" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.01%)</title><rect x="162.9" y="517" width="0.2" height="15.0" fill="rgb(237,129,44)" rx="2" ry="2" />
<text  x="165.89" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (12 samples, 0.18%)</title><rect x="138.5" y="501" width="2.1" height="15.0" fill="rgb(238,106,31)" rx="2" ry="2" />
<text  x="141.50" y="511.5" ></text>
</g>
<g >
<title>__memchr_avx2 (6 samples, 0.09%)</title><rect x="106.7" y="533" width="1.0" height="15.0" fill="rgb(211,180,27)" rx="2" ry="2" />
<text  x="109.68" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1 samples, 0.01%)</title><rect x="124.0" y="565" width="0.2" height="15.0" fill="rgb(232,212,28)" rx="2" ry="2" />
<text  x="127.01" y="575.5" ></text>
</g>
<g >
<title>node_sort_edges (1 samples, 0.01%)</title><rect x="205.7" y="309" width="0.1" height="15.0" fill="rgb(210,164,52)" rx="2" ry="2" />
<text  x="208.67" y="319.5" ></text>
</g>
<g >
<title>node_find_next (42 samples, 0.63%)</title><rect x="1178.9" y="597" width="7.4" height="15.0" fill="rgb(216,183,37)" rx="2" ry="2" />
<text  x="1181.86" y="607.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (2 samples, 0.03%)</title><rect x="165.2" y="501" width="0.3" height="15.0" fill="rgb(231,205,6)" rx="2" ry="2" />
<text  x="168.19" y="511.5" ></text>
</g>
<g >
<title>node_collect_matches (43 samples, 0.64%)</title><rect x="232.4" y="453" width="7.6" height="15.0" fill="rgb(207,183,29)" rx="2" ry="2" />
<text  x="235.35" y="463.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (267 samples, 4.00%)</title><rect x="999.1" y="117" width="47.2" height="15.0" fill="rgb(234,153,26)" rx="2" ry="2" />
<text  x="1002.11" y="127.5" >ac_t..</text>
</g>
<g >
<title>_dl_init (1 samples, 0.01%)</title><rect x="14.6" y="581" width="0.2" height="15.0" fill="rgb(249,63,10)" rx="2" ry="2" />
<text  x="17.60" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (11 samples, 0.16%)</title><rect x="158.6" y="501" width="2.0" height="15.0" fill="rgb(218,182,47)" rx="2" ry="2" />
<text  x="161.65" y="511.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (13 samples, 0.19%)</title><rect x="1062.2" y="229" width="2.3" height="15.0" fill="rgb(245,173,34)" rx="2" ry="2" />
<text  x="1065.21" y="239.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (1 samples, 0.01%)</title><rect x="16.9" y="597" width="0.2" height="15.0" fill="rgb(246,13,1)" rx="2" ry="2" />
<text  x="19.89" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_v (1 samples, 0.01%)</title><rect x="155.8" y="533" width="0.2" height="15.0" fill="rgb(248,43,48)" rx="2" ry="2" />
<text  x="158.82" y="543.5" ></text>
</g>
<g >
<title>mf_repdata_bookreplacements (41 samples, 0.61%)</title><rect x="1059.7" y="357" width="7.3" height="15.0" fill="rgb(232,189,54)" rx="2" ry="2" />
<text  x="1062.73" y="367.5" ></text>
</g>
<g >
<title>node_sort_edges (1 samples, 0.01%)</title><rect x="180.9" y="149" width="0.2" height="15.0" fill="rgb(218,13,15)" rx="2" ry="2" />
<text  x="183.92" y="159.5" ></text>
</g>
<g >
<title>__random_r (15 samples, 0.22%)</title><rect x="1174.1" y="533" width="2.6" height="15.0" fill="rgb(246,208,2)" rx="2" ry="2" />
<text  x="1177.09" y="543.5" ></text>
</g>
<g >
<title>ac_trie_findnext (1 samples, 0.01%)</title><rect x="1074.6" y="549" width="0.2" height="15.0" fill="rgb(236,151,31)" rx="2" ry="2" />
<text  x="1077.58" y="559.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (3 samples, 0.04%)</title><rect x="12.7" y="581" width="0.5" height="15.0" fill="rgb(218,92,44)" rx="2" ry="2" />
<text  x="15.65" y="591.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (4,464 samples, 66.87%)</title><rect x="260.1" y="453" width="789.0" height="15.0" fill="rgb(231,165,41)" rx="2" ry="2" />
<text  x="263.10" y="463.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>__strlen_avx2 (2 samples, 0.03%)</title><rect x="1167.6" y="565" width="0.3" height="15.0" fill="rgb(217,107,30)" rx="2" ry="2" />
<text  x="1170.55" y="575.5" ></text>
</g>
<g >
<title>node_collect_matches (20 samples, 0.30%)</title><rect x="197.4" y="293" width="3.5" height="15.0" fill="rgb(243,39,28)" rx="2" ry="2" />
<text  x="200.36" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (1 samples, 0.01%)</title><rect x="140.1" y="453" width="0.2" height="15.0" fill="rgb(228,77,51)" rx="2" ry="2" />
<text  x="143.09" y="463.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.01%)</title><rect x="165.2" y="485" width="0.2" height="15.0" fill="rgb(220,12,54)" rx="2" ry="2" />
<text  x="168.19" y="495.5" ></text>
</g>
<g >
<title>node_find_next (199 samples, 2.98%)</title><rect x="572.6" y="277" width="35.2" height="15.0" fill="rgb(248,47,20)" rx="2" ry="2" />
<text  x="575.60" y="287.5" >no..</text>
</g>
<g >
<title>ac_trie_traverse_action (432 samples, 6.47%)</title><rect x="166.1" y="485" width="76.3" height="15.0" fill="rgb(226,69,6)" rx="2" ry="2" />
<text  x="169.07" y="495.5" >ac_trie_..</text>
</g>
<g >
<title>mf_repdata_bookreplacements (144 samples, 2.16%)</title><rect x="1049.1" y="517" width="25.5" height="15.0" fill="rgb(217,60,14)" rx="2" ry="2" />
<text  x="1052.13" y="527.5" >m..</text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="14.4" y="597" width="0.2" height="15.0" fill="rgb(244,14,1)" rx="2" ry="2" />
<text  x="17.42" y="607.5" ></text>
</g>
<g >
<title>__GI___libc_realloc (1 samples, 0.01%)</title><rect x="61.3" y="485" width="0.1" height="15.0" fill="rgb(225,167,26)" rx="2" ry="2" />
<text  x="64.26" y="495.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.01%)</title><rect x="1106.0" y="309" width="0.2" height="15.0" fill="rgb(209,76,19)" rx="2" ry="2" />
<text  x="1109.04" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (1 samples, 0.01%)</title><rect x="1176.9" y="565" width="0.2" height="15.0" fill="rgb(209,57,29)" rx="2" ry="2" />
<text  x="1179.92" y="575.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (164 samples, 2.46%)</title><rect x="1017.1" y="101" width="29.0" height="15.0" fill="rgb(234,142,6)" rx="2" ry="2" />
<text  x="1020.14" y="111.5" >ac..</text>
</g>
<g >
<title>node_collect_matches (23 samples, 0.34%)</title><rect x="215.7" y="389" width="4.1" height="15.0" fill="rgb(233,25,33)" rx="2" ry="2" />
<text  x="218.74" y="399.5" ></text>
</g>
<g >
<title>node_book_replacement (3 samples, 0.04%)</title><rect x="1062.7" y="85" width="0.6" height="15.0" fill="rgb(206,125,45)" rx="2" ry="2" />
<text  x="1065.74" y="95.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.01%)</title><rect x="115.7" y="469" width="0.2" height="15.0" fill="rgb(229,37,45)" rx="2" ry="2" />
<text  x="118.70" y="479.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (1 samples, 0.01%)</title><rect x="16.7" y="597" width="0.2" height="15.0" fill="rgb(245,163,23)" rx="2" ry="2" />
<text  x="19.72" y="607.5" ></text>
</g>
<g >
<title>node_sort_edges (1 samples, 0.01%)</title><rect x="183.4" y="165" width="0.2" height="15.0" fill="rgb(239,3,23)" rx="2" ry="2" />
<text  x="186.39" y="175.5" ></text>
</g>
<g >
<title>ac_trie_traverse_setfailure (4,014 samples, 60.13%)</title><rect x="339.3" y="405" width="709.5" height="15.0" fill="rgb(240,173,12)" rx="2" ry="2" />
<text  x="342.29" y="415.5" >ac_trie_traverse_setfailure</text>
</g>
<g >
<title>__GI___libc_free (2 samples, 0.03%)</title><rect x="1101.6" y="197" width="0.4" height="15.0" fill="rgb(224,129,32)" rx="2" ry="2" />
<text  x="1104.62" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt; &gt; &gt;::allocate (9 samples, 0.13%)</title><rect x="156.5" y="517" width="1.6" height="15.0" fill="rgb(228,166,40)" rx="2" ry="2" />
<text  x="159.53" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::max_size (3 samples, 0.04%)</title><rect x="116.4" y="485" width="0.5" height="15.0" fill="rgb(252,175,27)" rx="2" ry="2" />
<text  x="119.41" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (48 samples, 0.72%)</title><rect x="109.0" y="533" width="8.5" height="15.0" fill="rgb(223,123,7)" rx="2" ry="2" />
<text  x="111.98" y="543.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (8 samples, 0.12%)</title><rect x="163.4" y="501" width="1.4" height="15.0" fill="rgb(205,1,49)" rx="2" ry="2" />
<text  x="166.42" y="511.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.01%)</title><rect x="146.8" y="389" width="0.2" height="15.0" fill="rgb(242,95,20)" rx="2" ry="2" />
<text  x="149.81" y="399.5" ></text>
</g>
<g >
<title>ac_trie_traverse_action (3 samples, 0.04%)</title><rect x="173.8" y="69" width="0.6" height="15.0" fill="rgb(227,115,52)" rx="2" ry="2" />
<text  x="176.85" y="79.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.01%)</title><rect x="1105.3" y="277" width="0.2" height="15.0" fill="rgb(211,58,48)" rx="2" ry="2" />
<text  x="1108.34" y="287.5" ></text>
</g>
<g >
<title>node_find_next (195 samples, 2.92%)</title><rect x="453.3" y="325" width="34.5" height="15.0" fill="rgb(205,85,7)" rx="2" ry="2" />
<text  x="456.30" y="335.5" >no..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (147 samples, 2.20%)</title><rect x="1138.7" y="549" width="26.0" height="15.0" fill="rgb(214,3,3)" rx="2" ry="2" />
<text  x="1141.74" y="559.5" >s..</text>
</g>
<g >
<title>operator delete (1 samples, 0.01%)</title><rect x="1157.5" y="453" width="0.2" height="15.0" fill="rgb(238,159,45)" rx="2" ry="2" />
<text  x="1160.48" y="463.5" ></text>
</g>
<g >
<title>node_create_next (1 samples, 0.01%)</title><rect x="104.7" y="549" width="0.2" height="15.0" fill="rgb(227,184,16)" rx="2" ry="2" />
<text  x="107.74" y="559.5" ></text>
</g>
</g>
</svg>
